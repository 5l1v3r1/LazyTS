#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 8c368515-c779-4ebb-95db-cf067966c8e3
# Source File: ..\Sources\LazyTS.psproj
#------------------------------------------------------------------------
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2014 v4.1.71
     Generated on:       2014-10-03 1:17 AM
     Generated by:       Francois-Xavier Cat
     Organization:       LazyWinAdmin.com
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2014
#>


#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
	Param ([String]$Commandline)
	if((Call-MainForm_psf) -eq "OK")
	{	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$datagridviewOutput = New-Object 'System.Windows.Forms.DataGridView'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonMessage = New-Object 'System.Windows.Forms.Button'
	$textboxComputerName = New-Object 'System.Windows.Forms.TextBox'
	$labelComputerName = New-Object 'System.Windows.Forms.Label'
	$buttonGetTsSession = New-Object 'System.Windows.Forms.Button'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$buttonProcess = New-Object 'System.Windows.Forms.Button'
	$richtextboxStatus = New-Object 'System.Windows.Forms.RichTextBox'
	$statusstrip1 = New-Object 'System.Windows.Forms.StatusStrip'
	$tooltip1 = New-Object 'System.Windows.Forms.ToolTip'
	$helpprovider1 = New-Object 'System.Windows.Forms.HelpProvider'
	$contextmenustripTSSession = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$disconnectTSSessionToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$sendTSSessionToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$contextmenustripTSProcess = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$sendTSMessageToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$stopTSProcessToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$stopTSSessionToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripstatuslabel1 = New-Object 'System.Windows.Forms.ToolStripStatusLabel'
	$toolstripstatuslabel2 = New-Object 'System.Windows.Forms.ToolStripStatusLabel'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$OnLoadFormEvent={
		#Stuff to do when the Form is loading
		Set-DataGridView -DataGridView $datagridviewOutput -AlternativeRowColor -ForeColor 'black' -BackColor 'AliceBlue'
	}
	
	$buttonGetTsSession_Click={
		TRY{
			# Set the ContextMenuStrip for TsSession
			$datagridviewOutput.ContextMenuStrip = $contextmenustripTSSession
			
			# Show the progression in the Richtextbox
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Get-TSSession" -Message "Loading"
			
			# Get the Data from Get-TSSession and convert to datatable
			$output = Get-TSSession -ComputerName $textboxComputerName.Text | ForEach-Object {
				[pscustomobject][ordered]@{
					#Server = $item.server
					ComputerName = $textboxComputerName.Text
					SessionID = $_.SessionID
					State = $_.state
					UserAccount = $_.useraccount
					IPAddress	= $_.IPAddress
					ClientName = $_.ClientName
					WindowStationName = $_.WindowStationName
					#Username = $_.username
					ConnectionState = $_.ConnectionState
					ClientBuildNumber = $_.ClientBuildNumber
					ClientDisplay = $_.ClientDisplay
					ClientIPAddress = $_.ClientIPAddress
					ConnectTime = $_.ConnectTime
					CurrentTime = $_.CurrentTime
					DisconnectTime = $_.DisconnectTime
					#DomainName = $_.DomainName
					LastInputTime = $_.LastInputTime
					LoginTime = $_.LoginTime
					}#pscustomobject properties
				} #FOREACH
			#Load-DataGridView -DataGridView $datagridviewOutput -Item (ConvertTo-DataTable -InputObject $output)
			Load-DataGridView -DataGridView $datagridviewOutput -Item $output
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Get-TSSession" -Message "Loaded"
		}
		CATCH{
			Write-Warning -Message "$textboxComputerName.Text - Get-TSSession Error"
			Write-Warning -Message $Error[0].Exception.Message
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Get-TSSession" -Message "Loading Error: $($Error[0].Exception.Message) " -MessageColor 'Red'
		}#CATCH
	}
	
	$buttonProcess_Click={
		TRY{
			# Set the ContextMenuStrip for TsProcess
			$datagridviewOutput.ContextMenuStrip = $contextmenustripTSProcess
			
			# Show the progression in the Richtextbox
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Get-TSProcess" -Message "Loading"
			
			# Get the TSProcess and output a PSObject
			$output = Get-TSProcess -ComputerName $textboxComputerName.Text | ForEach-Object {
				[pscustomobject][ordered]@{
					#Server = $Item.Server
					ComputerName = $textboxComputerName.Text
					SessionId = $_.SessionId
					ProcessName = $_.ProcessName
					ProcessId = $_.ProcessId
					SecurityIdentifier = $_.SecurityIdentifier
					UnderlyingProcess = $_.UnderlyingProcess
				}#pscustomobject properties
			}#FOREACH-OBJECT
				
			Load-DataGridView -DataGridView $datagridviewOutput -Item (ConvertTo-DataTable -InputObject $output)
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Get-TSProcess" -Message "Loaded"
		}#TRY
		CATCH{
			Write-Warning -Message "$textboxComputerName.Text - Get-TSProcess Error"
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Get-TSProcess" -Message "Loading Error" -MessageColor 'Red'
		}
	}
	
	$sendTSSessionToolStripMenuItem_Click={
		TRY{
			# ONE ROW SELECTED
			IF($datagridviewOutput.SelectedRows.Count -eq 1){
				# Input Message box to send
				[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
				$Message = [Microsoft.VisualBasic.Interaction]::InputBox("Message", "Send-TSMessage", "IMPORTANT: The Server is going down for maintenance in 10 minutes. Please save your work and logoff.")
				IF ($Message)
				{
					$Message = "$Message - Sent by $env:userdomain\$env:username"
					
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Sending Message to session $($datagridviewOutput.currentrow.Cells[1].value) on $($textboxComputerName.text)"
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "MESSAGE: $message"
					
					# Sending the message
					Send-TSMessage -ComputerName $textboxComputerName.Text -Text $message -Id $datagridviewOutput.currentrow.Cells[1].value -caption "Administrator Message" -ErrorAction 'Stop'
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Message Sent!"
				}
			}#IF($datagridviewOutput.SelectedRows.Count -eq 1)
			
			# MULTIPLE ROWS SELECTED
			IF ($datagridviewOutput.SelectedRows.Count -gt 1)
			{
				# Get the Values for the rows Selected
				$values = @()
				FOREACH ($SelectedRow in $datagridviewOutput.SelectedRows)
				{
					# Store the session ID in $values
					$values += $SelectedRow.Cells[1].Value
				}#FOREACH
				
				IF([System.Windows.Forms.MessageBox]::Show("You selected multiple sessions ($(($values|select-object -unique).count)), do you want to continue ?", "Question",[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes")
				{
					# Input Message box to send
					[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
					$Message = [Microsoft.VisualBasic.Interaction]::InputBox("Message", "Send-TSMessage", "IMPORTANT: The Server is going down for maintenance in 10 minutes. Please save your work and logoff.")
					IF ($Message)
					{
						$Message = "$Message - Sent by $env:userdomain\$env:username"
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "MESSAGE: $message"
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Sessions to receive the Message: $(($values|Select-Object -Unique).Count) sessions"
						
						# Send Message to each session
						# if the same session was selected twice, only one command will be sent
						FOREACH ($item in ($values | Select-Object -Unique))
						{
							IF ($item -eq 0) { Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Sending Message to session 0 might failed..." }
							Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Sending Message to session $item"
							Send-TSMessage -ComputerName $textboxComputerName.Text -Text $Message -Id $item -caption "Administrator Message"
							Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Sent Message to session $item"
						}#FOREACH
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Message Sent!"
					}#IF $MESSAGE
				}#IF Message Box "You selected multiple rows"
			}#IF($datagridviewOutput.SelectedRows.Count -gt 1)
		}#TRY
		CATCH{
			Write-Warning -Message "$textboxComputerName.Text - Send-TSMessage Error"
			Write-Warning -Message "$Error[0].Exception"
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Sending Error" -MessageColor 'Red'
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Last Error ($error[0])" -MessageColor 'Red'
		}
	}
	
	$disconnectTSSessionToolStripMenuItem_Click={
		TRY{
			# ONE ROW SELECTED
			IF($datagridviewOutput.SelectedRows.Count -eq 1){
				IF([System.Windows.Forms.MessageBox]::Show("Do you want to Disconnect the SessionID $($datagridviewOutput.currentrow.Cells[1].value) on $($textboxComputerName.text)?", "Question",[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Disconnect-TSSession" -Message "Disconnecting session $($datagridviewOutput.currentrow.Cells[1].value) on $($textboxComputerName.text)"
					Disconnect-TSSession -ComputerName $textboxComputerName.Text -Id $datagridviewOutput.currentrow.Cells[1].value -Force
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Disconnect-TSSession" -Message "Session $($datagridviewOutput.currentrow.Cells[1].value) on $($textboxComputerName.text) Disconnected!"
				}# Message Box
			}# IF($datagridviewOutput.SelectedRows.Count -eq 1)
			
			# MULTIPLE ROWS SELECTED
			IF ($datagridviewOutput.SelectedRows.Count -gt 1)
			{
				# Get the Values for the Rows Selected
				$values = @()
				FOREACH ($SelectedRow in $datagridviewOutput.SelectedRows)
				{
					# Store the session ID in $values
					$values += $SelectedRow.Cells[1].Value
				}#FOREACH
				
				#SingleValues
				$Singlevalues = $values | Select-Object -Unique
				
				IF([System.Windows.Forms.MessageBox]::Show("You selected multiple sessions ($($Singlevalues.count)) to disconnect, do you want to continue ?", "Question",[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Disconnect-TSSession" -Message "Sessions to Disconnect: $(($values | Select-Object -Unique).count)"
					
					# Disconnect each sessions selected
					# if the same session was selected twice, only one command will be sent
					FOREACH ($item in ($values | Select-Object -Unique)){
						IF ($item -eq 0){Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Disconnect-TSSession" -Message "Disconnecting the session 0 might failed..."}
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Disconnect-TSSession" -Message "Disconnecting session $item"
						Disconnect-TSSession -ComputerName $textboxComputerName.Text -Id $item
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Disconnect-TSSession" -Message "Session $item on $($textboxComputerName.text) should be Disconnected!"
					}#FOREACH
				}#IF Message Box "You selected multiple rows"
			}#IF($datagridviewOutput.SelectedRows.Count -gt 1)
		}#TRY
		CATCH{
			Write-Warning -Message "$textboxComputerName.Text - Disconnect-TSSession Error"
			Write-Warning -Message "$Error[0].Exception"
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Disconnect-TSSession" -Message "Disconnecting Session Failed!" -MessageColor 'red'
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Disconnect-TSSession" -Message "Last Error ($error[0])" -MessageColor 'Red'
		}#CATCH
	}
	
	$stopTSProcessToolStripMenuItem_Click={
		TRY{
			# ONE ROW SELECTED
			IF($datagridviewOutput.SelectedRows.Count -eq 1){
				IF([System.Windows.Forms.MessageBox]::Show("Do you want to stop the Process $($datagridviewOutput.currentrow.Cells[2].value) ID $($datagridviewOutput.currentrow.Cells[3].value) on $($textboxComputerName.text)?", "Question",[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes")
				{
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSProcess" -Message "Stopping - Process $($datagridviewOutput.currentrow.Cells[2].value) ID $($datagridviewOutput.currentrow.Cells[3].value) on $($textboxComputerName.text)"
					Stop-TSProcess -ComputerName $textboxComputerName.Text -Id $($datagridviewOutput.currentrow.Cells[3].value) -Force
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSProcess" -Message "Stopped - Process $($datagridviewOutput.currentrow.Cells[2].value) ID $($datagridviewOutput.currentrow.Cells[3].value) on $($textboxComputerName.text)"
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSProcess" -Message "Reloading Process List..."
					
					# Refresh the list of process
					$buttonProcess_Click.invoke()
				}# Message box "Do you want to stop the Process"
			}#IF($datagridviewOutput.SelectedRows.Count -eq 1)
			
			# MULTIPLE ROWS SELECTED
			IF ($datagridviewOutput.SelectedRows.Count -gt 1)
			{
				IF([System.Windows.Forms.MessageBox]::Show("You selected multiple Processes ($($datagridviewOutput.SelectedRows.Count)) to Stop, do you want to continue ?", "Question",[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes")
				{
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSProcess" -Message "Processes to Stop: $($datagridviewOutput.SelectedRows.Count)"
					
					# Get the Values for the Rows Selected and kill each process
					FOREACH ($SelectedRow in $datagridviewOutput.SelectedRows) {
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSProcess" -Message "Stopping - Process $($SelectedRow.Cells[2].Value) ID $($SelectedRow.Cells[3].Value) on $($textboxComputerName.text)"
						Stop-TSProcess -ComputerName $textboxComputerName.Text -Id $($SelectedRow.Cells[3].Value) -Force
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSProcess" -Message "Stopped - Process $($SelectedRow.Cells[2].Value) ID $($SelectedRow.Cells[3].Value)  on $($textboxComputerName.text)"
					}#FOREACH
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSProcess" -Message "Done. Reloading Process List..."
					
					# Refresh the list of process
					$buttonProcess_Click.invoke()
				}#IF Message Box "You selected multiple rows"
			}#IF($datagridviewOutput.SelectedRows.Count -gt 1)
		}#TRY
		CATCH{
			Write-Warning -Message "$textboxComputerName.Text - Disconnect-TSSession Error"
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSProcess" -Message "Stopping Process $($datagridviewOutput.currentrow.Cells[2].value) ID $($datagridviewOutput.currentrow.Cells[3].value) on $($textboxComputerName.text) Failed!" -MessageColor 'red'
		}#CATCH
	}
	
	$buttonExit_Click = {
		# Close the GUI
		$MainForm.Close()
	}
	
	$datagridviewOutput_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
		IF($datagridviewOutput.DataSource -is [System.Data.DataTable])
		{
			#$column = $datagridviewOutput.Columns[$_.Columns]
			$column = $datagridviewOutput.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			IF($column.HeaderCell.SortGlyphDirection -eq 'Descending'){
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}#IF($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			$datagridviewOutput.Sort($datagridviewOutput.Columns[$_.ColumnIndex], $direction)
			
		}#IF($datagridviewOutput.DataSource -is [System.Data.DataTable])
	}
	
	$toolstripstatuslabel1_Click = {
		# Open LazyWinAdmin Blog
		Start-Process "http://lazywinadmin.com"
	}
	
	$buttonMessage_Click={
		$sendTSSessionToolStripMenuItem_Click.Invoke()
	}
	
	$stopTSSessionToolStripMenuItem_Click={
		TRY
		{
			# ONE ROW SELECTED
			IF ($datagridviewOutput.SelectedRows.Count -eq 1)
			{
				IF ([System.Windows.Forms.MessageBox]::Show("Do you want to Close the SessionID $($datagridviewOutput.currentrow.Cells[1].value) on $($textboxComputerName.text)?", "Question", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSSession" -Message "Closing session $($datagridviewOutput.currentrow.Cells[1].value) on $($textboxComputerName.text)"
					Stop-TSSession -ComputerName $textboxComputerName.Text -Id $datagridviewOutput.currentrow.Cells[1].value -Force
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSSession" -Message "Session $($datagridviewOutput.currentrow.Cells[1].value) on $($textboxComputerName.text) Closed!"
				}# Message Box
			}# IF($datagridviewOutput.SelectedRows.Count -eq 1)
			
			# MULTIPLE ROWS SELECTED
			IF ($datagridviewOutput.SelectedRows.Count -gt 1)
			{
				# Get the Values for the Rows Selected
				$values = @()
				FOREACH ($SelectedRow in $datagridviewOutput.SelectedRows)
				{
					# Store the session ID in $values
					$values += $SelectedRow.Cells[1].Value
				}#FOREACH
				
				$SingleValues = $values | Select-Object -Unique
				
				IF ([System.Windows.Forms.MessageBox]::Show("You selected multiple sessions ($($SingleValues.count)) to Close, do you want to continue ?", "Question", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSSession" -Message "Sessions to Close: $(($values | Select-Object -Unique).count)"
					
					# Disconnect each sessions selected
					# if the same session was selected twice, only one command will be sent
					FOREACH ($item in ($values | Select-Object -Unique))
					{
						IF ($item -eq 0) { Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSSession" -Message "Closing the session 0 might failed..." }
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSSession" -Message "Closing session $item"
						Stop-TSSession -ComputerName $textboxComputerName.Text -Id $item -Force
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSSession" -Message "Session $item on $($textboxComputerName.text) should be Closed!"
					}#FOREACH
				}#IF Message Box "You selected multiple rows"
			}#IF($datagridviewOutput.SelectedRows.Count -gt 1)
			
			# Refresh the list of Session(s)
			$buttonGetTsSession_Click.invoke()
		}#TRY
		CATCH
		{
			Write-Warning -Message "$textboxComputerName.Text - Stop-TSSession Error"
			Write-Warning -Message "$Error[0].Exception"
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSSession" -Message "Closing Session Failed!" -MessageColor 'red'
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSSession" -Message "Last Error ($error[0])" -MessageColor 'Red'
		}#CATCH
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_textboxComputerName = $textboxComputerName.Text
		$script:MainForm_richtextboxStatus = $richtextboxStatus.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$datagridviewOutput.remove_ColumnHeaderMouseClick($datagridviewOutput_ColumnHeaderMouseClick)
			$buttonMessage.remove_Click($buttonMessage_Click)
			$buttonGetTsSession.remove_Click($buttonGetTsSession_Click)
			$buttonExit.remove_Click($buttonExit_Click)
			$buttonProcess.remove_Click($buttonProcess_Click)
			$MainForm.remove_Load($OnLoadFormEvent)
			$disconnectTSSessionToolStripMenuItem.remove_Click($disconnectTSSessionToolStripMenuItem_Click)
			$sendTSSessionToolStripMenuItem.remove_Click($sendTSSessionToolStripMenuItem_Click)
			$sendTSMessageToolStripMenuItem.remove_Click($sendTSSessionToolStripMenuItem_Click)
			$stopTSProcessToolStripMenuItem.remove_Click($stopTSProcessToolStripMenuItem_Click)
			$stopTSSessionToolStripMenuItem.remove_Click($stopTSSessionToolStripMenuItem_Click)
			$toolstripstatuslabel1.remove_Click($toolstripstatuslabel1_Click)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$groupbox1.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($datagridviewOutput)
	$MainForm.Controls.Add($groupbox1)
	$MainForm.Controls.Add($richtextboxStatus)
	$MainForm.Controls.Add($statusstrip1)
	$MainForm.ClientSize = '634, 324'
	#region Binary Data
	$MainForm.Icon = [System.Convert]::FromBase64String('
AAABAAQAGBgAAAEAIACICQAARgAAACAgAAABACAAqBAAAM4JAAAQEAAAAQAgAGgEAAB2GgAAFhYA
AAEAIAAQCAAA3h4AACgAAAAYAAAAMAAAAAEAIAAAAAAAAAkAANcNAADXDQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAXAAAAKwAAACsAAAArAAAAFwAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAVVVVAVVVVQFVVVUGVVVVIFVVVW1VVVW4VVVV3VVVVfNVVVX9
VVVV/8DAwP+cnJz/hoaG/1VVVf9VVVX/VVVV9VVVVdVVVVWWVVVVVVVVVSxVVVUcVVVVHAAAAAAA
AAAAyMjIAsjIyATIyMgHyMjIHcjIyGDIyMiuyMjI28jIyPOgoKD9gICA/+Li4v/IyMj/oKCg/2Zm
Zv+AgID/oKCg9cjIyNfIyMiXyMjIVcjIyCzIyMgdyMjIHQAAAAAAAAAAVVVVC1VVVQ9VVVUZVVVV
M1VVVW9VVVWzVVVV4FVVVfRVVVX9VVVV/+Li4v/i4uL/x8fH/1VVVf9VVVX/VVVV+lVVVeFVVVWx
VVVVcFVVVUBVVVUrVVVVKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAzAAAAXFNWVf+goKD/U1ZV/wAAAFwAAAAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEpOTP/IyMj/Sk5M
/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAg4CAZoOAgP+DgID/
g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/g4CA/2ZnZv+lo6P/Zmdm/4OAgP+DgID/g4CA/4OAgP+D
gID/g4CA/4OAgP+DgID/g4CAZgAAAAAAAAAAg4CA/8vJyf/6+Pj/+vj4//r4+P/6+Pj/+vj4//r4
+P/6+Pj/+vj4/+Tj4//6+Pj/5OPj//r4+P/6+Pj/+vj4//r4+P/6+Pj/+vj4//r4+P/Lycn/g4CA
/wAAAAAAAAAAg4CA//n4+P/s6un/7Ono/+zp6P/s6ej/7Onp/+zp6f/s6en/7Onp/+zp6f/s6en/
7Onp/+zp6f/s6en/7Onp/+zp6f/s6en/6+jm/+zq6f/5+Pj/g4CA/wAAAAAAAAAAg4CA//n4+P+H
SiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og/4dK
IP+HSiD/h0og/4dKIP/5+Pj/g4CA/wAAAAAAAAAAg4CA//r5+f+HSiD/qHFG/6x3S/+yfFD/toFW
/7uHW//AjGD/xZNm/8mYa//NnXD/zJtu/8eWaf/DkWT/vope/7mFWf+0gFT/sHpP/4dKIP/5+Pj/
g4CA/wAAAAAAAAAAg4CA//r5+f+JTiX/uYxp/7yQbv+/lHH/7vDw/+zu7v/s7u7/7O7u/+zu7v/J
mWz/yZdq/8WUZ//CjmP/vYpe/7mEWP+0f1P/r3pO/4dKIP/5+Pj/g4CA/wAAAAAAAAAAg4CA//r5
+f+JTiX/uY1r/7ySb//AlnP/8PHx//Dx8f/v8PD/7e/v/+zu7v/Fk2b/xZJm/8KQZP++i1//u4db
/7aDV/+yfVL/rnhM/4dKIP/5+Pj/g4CA/wAAAAAAAAAAg4CA//r5+f+JTiX/uY9u/72Tcf/AlnX/
8PHx//Dx8f/w8fH/8PHx/+/x8f/Fl27/wI1g/+zu7v/s7u7/7O7u/7WAU/+we0//rXZK/4dKIP/6
+fn/g4CA/wAAAAAAAAAAg4CA//r5+f+JTiX/uo9v/72Tcv+/l3b/pHZX/6R2V/+kdlf/pHZX/6R2
V//LpYT/y6KB/+7v7//s7u7/7O7u/7J8Uf+teE3/qnNI/4dKIP/6+fn/g4CA/wAAAAAAAAAAg4CA
//r5+f+JTiX/upFx/72UdP+/lnf/wpp7/8Scff/Gn3//yKGB/8ijg//Jo4P/yaSD//Hy8v/w8vL/
7vDw/7J9U/+teU7/qHJH/4dKIP/6+fn/g4CA/wAAAAAAAAAAg4CA//r5+f+JTiX/uZFz/7yUdf+/
lnj/wZl6/8Ocff/Fn3//xp+A/8eggv/IooL/yKKC/6l9X/+pfV//qX1f/8KbfP/AmXr/vZR1/4dK
IP/6+fn/g4CA/wAAAAAAAAAAg4CA//r5+f+JTiX/uZFz/7uUdv++l3j/wJl7/8Kbff/DnX//xZ6A
/8Wggf/FoIL/xaCB/8Wfgf/Enn//w5x+/8CafP+/mHr/vJN2/4dKIP/6+fn/g4CA/wAAAAAAAAAA
g4CA//r5+f+JTST/8vPz//Lz8//y8/P/8vPz//Lz8//y8/P/8vPz//Lz8//y8/P/8vPz//Lz8//y
8/P/8vPz//Lz8//y8/P/8fPz/4dKIP/6+fn/g4CA/wAAAAAAAAAAg4CA//v5+f+HSiD/h0og/4dK
IP+HSiD/h0og/4dLIf+HSyH/h0sh/4hMIv+ITCL/iEwi/4hMI/+ITCP/iEwj/4lNJP+JTST/iU0k
/4dKIP/7+fn/g4CA/wAAAAAAAAAAg4CA//X09Pv7+fn/+/n5//v5+f/6+Pj/+vj4//r4+P/6+Pj/
+vj4//r4+P/6+Pj/+vj4//r4+P/6+Pj/+vj4//r4+P/6+Pj/+vj4//r5+f/29PT8g4CA/wAAAAAA
AAAAg4CAo4OAgP+DgID/g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/g4CA/4OA
gP+DgID/g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/g4CAwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAD///8A/8H/AIAAAQCAAAEAgAABAP+A/wD/4/8AgAABAIAAAQCA
AAEAgAABAIAAAQCAAAEAgAABAIAAAQCAAAEAgAABAIAAAQCAAAEAgAABAIAAAQCAAAEAgAABAP//
/wAoAAAAIAAAAEAAAAABACAAAAAAAAAQAAASCwAAEgsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBACEBA
QBBLS0sRS0tLEUtLSxFLS0sRRkZGRUdHR+5FRUX3RUVF90VFRfdFRUX3RUVF90hISMBLS0sRS0tL
EUtLSxFLS0sRS0tLEUlJSQ5VVVUGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAI6Ojgl0dHRsdHR0rXV1dchycnLfcnJy9nJycvZYWFj7V1dX/2hoaP9oaGj/aGho/2hoaP9o
aGj/R0dH/2xsbPdycnL2cnJy9nJycuF1dXXIfHx8pYGBgV0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAv7+/DJaWlnmcnJy6mpqa0JaWluCSkpLykpKS8mdnZ/mFhYX/tra2
/8PDw//Dw8P/w8PD/729vf9NTU3+iYmJ85KSkvKSkpLylpaW4pqamtClpaW1oqKibv///wEAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBACEBAQBBLS0sRS0tLEUtLSxFL
S0sRRUVFSkRERPZDQ0P/dHR0/3p6ev9RUVH5Q0ND/0ZGRstHR0cSS0tLEUtLSxFLS0sRS0tLEUlJ
SQ5VVVUGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEVFRZxwcHD/dXV1/1NTU+9ERERaAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACLkpCKhouJ+YWKiP+F
ioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WK
iP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/houJ+4qRj5IAAAAAiIiI
D4iNi/f29/f/////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////2
9vb/iI2L+Y6OjgmIiIgejJGP8//////VzMP/1cvC/9XKwf/VysH/1crB/9TKwf/UysH/1MrB/9TJ
wP/UycD/08nA/9PJwP/TycD/08nA/9PJwP/SycD/0snA/9LJwP/SycD/0si//9HIv//RyL//0ci/
/9HIv//RyL//0si///////+IjYv5iIiID4iIiB6MkY/z/////4dKIP+TWjP/k1oz/5NbNP+UWzT/
lFw1/5RcNf+VXTb/lV02/5VeN/+WXjf/ll43/5ZeN/+WXjf/ll43/5ZeN/+VXTb/lV02/5VdNf+U
XDX/lFw0/5RbNP+TWzP/k1oz/5NaMv+HSiD//////4iNi/mIiIgPiIiIHoyRj/P/////h0og/690
RP+yeEj/tXxM/7d/UP+6g1T/vYZY/7+KXP/CjmD/xZFj/8eVZ//KmGv/zJtt/8ybbv/KmGv/x5Vn
/8WSZP/CjmD/wIpc/72HWP+6g1T/t39Q/7V8TP+yeEn/r3VF/45ULP//////iI2L+YiIiA+IiIge
jJGP8/////+HSiD/r3RE/7J4SP+1fEz/t39Q/7qDVP+9h1j/wIpc/8KOYP/FkWP/x5Vn/8qYa//M
m27/zJxu/8qZa//IlWj/xZJk/8KOYP/Ai1z/vYdY/7qDVP+4gFH/tXxN/7J4Sf+vdUX/jlQs////
//+IjYv5iIiID4iIiB6MkY/z/////4dKIP+wdUX/snhJ/7R8TP+3f1D/uYJT/7yFV/++iVr/wYxe
/+zu7v/s7u7/7O7u/+zu7v/s7u7/7O7u/8WSZP/Dj2H/wYxe/7+JWv+8hlf/uoJT/7d/T/+0e0v/
snhI/690RP+OVCz//////4iNi/mIiIgPiIiIHoyRj/P/////h0og/7N7Tv+1flL/uIJV/7qFWf+8
iFz/vold/76KXf+/i13/7O7u/+zu7v/s7u7/7O7u/+zu7v/s7u7/wo5f/8CLXf++iVr/vIZX/7qD
VP+4gFH/tX1N/7N5Sv+wdkb/rnJC/45ULP//////iI2L+YiIiA+IiIgejJGP8/////+HSiD/toFW
/7iFW/+7h13/vYph/76MY//Aj2b/wpJp/8STa//u8PD/7e/v/+zu7v/s7u7/7O7u/+zu7v++iFr/
vYdY/7uEVv+6glP/t39Q/7V9Tf+zekr/sXZH/65zQ/+scED/jlQr//////+IjYv5iIiID4iIiB6M
kY/z/////4dKIP/v8fH/7/Hx/+/x8f/v8fH/wJBq/8KTbP/DlG7/xJZw/+/x8f/v8fH/7/Hx/+7w
8P/t7+//7O7u/7qDVP+5glP/7O7u/+zu7v/s7u7/7O7u/+zu7v+uc0P/rHBA/6ptPf+OVCv/////
/4iNi/mIiIgPiIiIHoyRj/P/////h0og//Dy8v/a4N3/2uDd//Dy8v/ClG//w5Zy/8SXc//FmXX/
8PLy//Dy8v/w8vL/8PLy//Dy8v/v8fH/u4VZ/7V8Tf/s7u7/7O7u/+zu7v/s7u7/7O7u/6xvP/+q
bTz/p2o5/45TK///////iI2L+YiIiA+IiIgejJGP8/////+HSiD/8fPz//Hz8//x8/P/8fPz/8SZ
dv/Emnj/xpt5/8edev/x8/P/8fPz//Hz8//x8/P/8fPz//Hz8//Hnnz/xJdz/+7w8P/s7u7/7O7u
/+zu7v/s7u7/qGs7/6dpOP+lZjX/jVMr//////+IjYv5iIiID4iIiB6MkY/z/////4dKIP/y9PT/
4OXi/+Dl4v/z9PT/xp5+/8eff//IoIH/yaGB/7CIbf+wiG3/sIht/7CIbf+wiG3/sIht/8mjg//J
ooP/8/T0//L09P/w8vL/7/Dw/+3v7/+lZzb/pGU0/6RlNP+NUyv//////4iNi/mIiIgPiIiIHoyR
j/P/////h0og//P09P/09fX/9PX1//T19f/Io4X/yqSG/8qliP/Lpoj/y6aJ/8unif/Lp4r/y6eK
/8univ/Lp4r/y6eJ/8umif+3knn/t5J5/7eSef+3knn/t5J5/8aef//BlXT/u4xo/41TK///////
iI2L+YiIiA+IiIgejJGP8/////+HSiD/9PX1/+Xp5//l6ef/9fb2/82qkP/NqpD/zaqQ/82qkP/N
qpD/zquQ/86rkP/OrJH/zqyR/86rkP/Oq5D/zaqQ/82qkP/NqpD/zaqQ/82qkP/NqpD/zaqQ/82q
kP/NqpD/jVMr//////+IjYv5iIiID4iIiB6MkY/z/////4dKIP/19vb/9vf3//b39//29/f/0rOb
/9Kzm//Ss5v/0rOb/9Kzm//Ss5v/0rOb/9Kzm//Ss5v/0rOb/9Kzm//Ss5v/0rOb/9Kzm//Ss5v/
0rOb/9Kzm//Ss5v/0rOb/9Kzm/+NUyv//////4iNi/mIiIgPiIiIHoyRj/P/////h0og//b39//q
7ez/6u3s//f4+P/Xu6b/17um/9e7pv/Xu6b/17um/9e7pv/Xu6b/17um/9e7pv/Xu6b/17um/9e7
pv/Xu6b/17um/9e7pv/Xu6b/17um/9e7pv/Xu6b/17um/45TK///////iI2L+YiIiA+IiIgejJGP
8/////+HSiD/9fTz//b19P/29fT/9vX0//b19P/29fT/9vX0//b19P/29fT/9vX0//b19P/29fT/
9vX0//b19P/29fT/9vX0//b19P/29fT/9vX0//b19P/29fT/9vX0//b19P/08vD/jlQs//////+I
jYv5iIiID4CSgA6Jjoz4/Pz8/6d6W/+HSiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og/4dK
IP+HSiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og
/4dKIP+meFn/+fj4/4iNi/qAgIAGAAAAAIuSj8DHysn8/Pz8////////////////////////////
////////////////////////////////////////////////////////////////////////////
//////////////////////////z8/P/JzMz8jZKQvAAAAAAAAAAAgIuLFouQjr2HjIr6hYqI/4WK
iP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/hYqI
/4WKiP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/iI2L+IuPjsCFhYUXAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////wAAB/4AAAf+AAA
D/wAAB///B//gAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAAB////////////////KAAAABAAAAAg
AAAAAQAgAAAAAAAABAAA1w0AANcNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AFwAAACsAAAArAAAAKwAAABcAAAAAAAAAAAAAAAAAAAAAAAAAABVVVV2VVVVnFVVVclVVVXrVVVV
/FVVVf9VVVX/wMDA/5ycnP+Ghob/VVVV/1VVVf9VVVX+VVVV91VVVd5VVVWtyMjIdMjIyJvIyMjG
yMjI6sjIyPugoKD/gICA/+Li4v/IyMj/oKCg/2ZmZv+AgID/oKCg/sjIyPbIyMjYyMjIoVVVVZBV
VVWxVVVV1VVVVfBVVVX9VVVV/1VVVf/i4uL+4uLi/sfHx/5VVVX/VVVV/1VVVf5VVVX4VVVV5FVV
VbmDgID/g4CA/4OAgP+DgID/g4CA/2lmZv9VU1P/WFhY/52dnf9YWFj/VlRU/2lmZv+DgID/g4CA
/4OAgP+DgID/g4CA/+zu7v/s7u7/7O7u/+zu7v/s7u7/7O7u/52env/X2Nj/oaKi/+zu7v/s7u7/
7O7u/+zu7v/s7u7/g4CA/4OAgP/s7u7/0tPT/9LT0//S09P/0tPT/9LT0//S09P/0tPT/9LT0//S
09P/0tPT/9LT0//S09P/7O7u/4OAgP+DgID/7O7u/4VkRP+FZET/hWRE/4VkRP+FZET/hWRE/4Vk
RP+FZET/hWRE/4VkRP+FZET/hWRE/+zu7v+DgID/g4CA/+zu7v+FZET/s41n/7CJYv+wiWH/sIlh
/7CJYf+wiWH/sotk/7WPav+1j2r/tY9q/4VkRP/s7u7/g4CA/4OAgP/s7u7/hWRE/7eTbv+zjWf/
7O7u/+zu7v/s7u7/roZd/+zu7v/s7u7/roZd/66GXf+FZET/7O7u/4OAgP+DgID/7O7u/4VkRP/B
ooT/waKE/+zu7v/s7u7/7O7u/7WRbP+kZTT/pGU0/6qAVv+ofVL/hWRE/+zu7v+DgID/g4CA/+zu
7v+FZET/yrCW/8qwlv+kZTT/pGU0/6RlNP/KsJb/yrCW/8WpjP+5lnT/sIli/4VkRP/s7u7/g4CA
/4OAgP/s7u7/hWRE/9S+qf/Uvqn/1L6p/9S+qf/Uvqn/1L6p/9S+qf/Uvqn/1L6p/9S+qf+FZET/
7O7u/4OAgP+DgID/7O7u/4VkRP+FZET/hWRE/4VkRP+FZET/hWRE/4VkRP+FZET/hWRE/4VkRP+F
ZET/hWRE/+zu7v+DgID/g4CA/+zu7v/s7u7/7O7u/+zu7v/s7u7/7O7u/+zu7v/s7u7/7O7u/+zu
7v/s7u7/7O7u/+zu7v/s7u7/g4CA/4+MjMODgID/g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/g4CA
/4OAgP+DgID/g4CA/4OAgP+DgID/g4CA/5CNjcb8HwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAABYAAAAsAAAAAQAgAAAAAACQ
BwAA1w0AANcNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AFwAAACsAAAArAAAAKwAAABcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVVVUBVVVV
AVVVVQZVVVUgVVVVbVVVVbhVVVXdVVVV81VVVf1VVVX/wMDA/5ycnP+Ghob/VVVV/1VVVf9VVVX1
VVVV1VVVVZZVVVVVVVVVLFVVVRxVVVUcyMjIAsjIyATIyMgHyMjIHcjIyGDIyMiuyMjI28jIyPOg
oKD9gICA/+Li4v/IyMj/oKCg/2ZmZv+AgID/oKCg9cjIyNfIyMiXyMjIVcjIyCzIyMgdyMjIHVVV
VQtVVVUPVVVVGVVVVTNVVVVvVVVVs1VVVeBVVVX0VVVV/VVVVf/i4uL/4uLi/8fHx/9VVVX/VVVV
/1VVVfpVVVXhVVVVsVVVVXBVVVVAVVVVK1VVVSgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAADMAAABcU1ZV/6CgoP9TVlX/AAAAXAAAADMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEpOTP/IyMj/Sk5M/wAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIOAgGaDgID/g4CA/4OAgP+DgID/g4CA
/4OAgP+DgID/g4CA/4OAgP9mZ2b/paOj/2ZnZv+DgID/g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/
g4CA/4OAgGaDgID/y8nJ//r4+P/6+Pj/+vj4//r4+P/6+Pj/+vj4//r4+P/6+Pj/5OPj//r4+P/k
4+P/+vj4//r4+P/6+Pj/+vj4//r4+P/6+Pj/+vj4/8vJyf+DgID/g4CA//n4+P/s6un/7Ono/+zp
6P/s6ej/7Onp/+zp6f/s6en/7Onp/+zp6f/s6en/7Onp/+zp6f/s6en/7Onp/+zp6f/s6en/6+jm
/+zq6f/5+Pj/g4CA/4OAgP/5+Pj/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/
h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/+fj4/4OAgP+DgID/+vn5/4dKIP+o
cUb/rHdL/7J8UP+2gVb/u4db/8CMYP/Fk2b/yZhr/82dcP/Mm27/x5Zp/8ORZP++il7/uYVZ/7SA
VP+wek//h0og//n4+P+DgID/g4CA//r5+f+JTiX/uYxp/7yQbv+/lHH/7vDw/+zu7v/s7u7/7O7u
/+zu7v/JmWz/yZdq/8WUZ//CjmP/vYpe/7mEWP+0f1P/r3pO/4dKIP/5+Pj/g4CA/4OAgP/6+fn/
iU4l/7mNa/+8km//wJZz//Dx8f/w8fH/7/Dw/+3v7//s7u7/xZNm/8WSZv/CkGT/votf/7uHW/+2
g1f/sn1S/654TP+HSiD/+fj4/4OAgP+DgID/+vn5/4lOJf+5j27/vZNx/8CWdf/w8fH/8PHx//Dx
8f/w8fH/7/Hx/8WXbv/AjWD/7O7u/+zu7v/s7u7/tYBT/7B7T/+tdkr/h0og//r5+f+DgID/g4CA
//r5+f+JTiX/uo9v/72Tcv+/l3b/pHZX/6R2V/+kdlf/pHZX/6R2V//LpYT/y6KB/+7v7//s7u7/
7O7u/7J8Uf+teE3/qnNI/4dKIP/6+fn/g4CA/4OAgP/6+fn/iU4l/7qRcf+9lHT/v5Z3/8Kae//E
nH3/xp9//8ihgf/Io4P/yaOD/8mkg//x8vL/8PLy/+7w8P+yfVP/rXlO/6hyR/+HSiD/+vn5/4OA
gP+DgID/+vn5/4lOJf+5kXP/vJR1/7+WeP/BmXr/w5x9/8Wff//Gn4D/x6CC/8iigv/IooL/qX1f
/6l9X/+pfV//wpt8/8CZev+9lHX/h0og//r5+f+DgID/g4CA//r5+f+JTiX/uZFz/7uUdv++l3j/
wJl7/8Kbff/DnX//xZ6A/8Wggf/FoIL/xaCB/8Wfgf/Enn//w5x+/8CafP+/mHr/vJN2/4dKIP/6
+fn/g4CA/4OAgP/6+fn/iU0k//Lz8//y8/P/8vPz//Lz8//y8/P/8vPz//Lz8//y8/P/8vPz//Lz
8//y8/P/8vPz//Lz8//y8/P/8vPz//Hz8/+HSiD/+vn5/4OAgP+DgID/+/n5/4dKIP+HSiD/h0og
/4dKIP+HSiD/h0sh/4dLIf+HSyH/iEwi/4hMIv+ITCL/iEwj/4hMI/+ITCP/iU0k/4lNJP+JTST/
h0og//v5+f+DgID/g4CA//X09Pv7+fn/+/n5//v5+f/6+Pj/+vj4//r4+P/6+Pj/+vj4//r4+P/6
+Pj/+vj4//r4+P/6+Pj/+vj4//r4+P/6+Pj/+vj4//r5+f/29PT8g4CA/4OAgKODgID/g4CA/4OA
gP+DgID/g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/g4CA
/4OAgP+DgID/g4CA/4OAgMH/g/wAAAAAAAAAAAAAAAAA/wH8AP/H/AAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA')
	#endregion
	$MainForm.MinimumSize = '650, 363'
	$MainForm.Name = "MainForm"
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = "LazyTS"
	$MainForm.add_Load($OnLoadFormEvent)
	#
	# datagridviewOutput
	#
	$datagridviewOutput.AllowUserToAddRows = $False
	$datagridviewOutput.AllowUserToDeleteRows = $False
	$datagridviewOutput.AllowUserToOrderColumns = $True
	$datagridviewOutput.ContextMenuStrip = $contextmenustripTSSession
	$datagridviewOutput.Dock = 'Fill'
	$datagridviewOutput.Location = '0, 73'
	$datagridviewOutput.Name = "datagridviewOutput"
	$datagridviewOutput.ReadOnly = $True
	$datagridviewOutput.RowHeadersVisible = $False
	$datagridviewOutput.SelectionMode = 'FullRowSelect'
	$datagridviewOutput.Size = '634, 158'
	$datagridviewOutput.TabIndex = 5
	$datagridviewOutput.add_ColumnHeaderMouseClick($datagridviewOutput_ColumnHeaderMouseClick)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($buttonMessage)
	$groupbox1.Controls.Add($textboxComputerName)
	$groupbox1.Controls.Add($labelComputerName)
	$groupbox1.Controls.Add($buttonGetTsSession)
	$groupbox1.Controls.Add($buttonExit)
	$groupbox1.Controls.Add($buttonProcess)
	$groupbox1.Dock = 'Top'
	$groupbox1.Location = '0, 0'
	$groupbox1.Name = "groupbox1"
	$groupbox1.Size = '634, 73'
	$groupbox1.TabIndex = 9
	$groupbox1.TabStop = $False
	#
	# buttonMessage
	#
	$buttonMessage.Font = "Microsoft Sans Serif, 8.25pt"
	#region Binary Data
	$buttonMessage.Image = [System.Convert]::FromBase64String('
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
h4ez3wFCsmtsCMAhlwAAAABJRU5ErkJggg==')
	#endregion
	$buttonMessage.ImageAlign = 'TopCenter'
	$buttonMessage.Location = '368, 19'
	$buttonMessage.Name = "buttonMessage"
	$buttonMessage.Size = '64, 45'
	$buttonMessage.TabIndex = 8
	$buttonMessage.Text = "Message"
	$buttonMessage.TextAlign = 'BottomCenter'
	$buttonMessage.UseVisualStyleBackColor = $True
	$buttonMessage.add_Click($buttonMessage_Click)
	#
	# textboxComputerName
	#
	$textboxComputerName.Font = "Microsoft Sans Serif, 12pt"
	$textboxComputerName.Location = '16, 27'
	$textboxComputerName.Name = "textboxComputerName"
	$textboxComputerName.Size = '206, 26'
	$textboxComputerName.TabIndex = 0
	$textboxComputerName.Text = "$env:computername"
	#
	# labelComputerName
	#
	$labelComputerName.Font = "Microsoft Sans Serif, 11.25pt, style=Bold"
	$labelComputerName.Location = '14, 8'
	$labelComputerName.Name = "labelComputerName"
	$labelComputerName.Size = '136, 23'
	$labelComputerName.TabIndex = 5
	$labelComputerName.Text = "ComputerName"
	#
	# buttonGetTsSession
	#
	$buttonGetTsSession.ContextMenuStrip = $contextmenustripTSSession
	$buttonGetTsSession.Font = "Microsoft Sans Serif, 8.25pt"
	#region Binary Data
	$buttonGetTsSession.Image = [System.Convert]::FromBase64String('
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
rkJggg==')
	#endregion
	$buttonGetTsSession.ImageAlign = 'TopCenter'
	$buttonGetTsSession.Location = '228, 19'
	$buttonGetTsSession.Name = "buttonGetTsSession"
	$buttonGetTsSession.Size = '64, 45'
	$buttonGetTsSession.TabIndex = 1
	$buttonGetTsSession.Text = "Sessions"
	$buttonGetTsSession.TextAlign = 'BottomCenter'
	$tooltip1.SetToolTip($buttonGetTsSession, "Use Get-TSSession to get a list of sessions from a local or remote computers")
	$buttonGetTsSession.UseVisualStyleBackColor = $True
	$buttonGetTsSession.add_Click($buttonGetTsSession_Click)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Top, Right'
	#region Binary Data
	$buttonExit.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAG6QAABukBM89dwwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAUpSURB
VEhLjdV9UMx5HAfwT2xhRFx7URpr6bKXoWjttaeHrbTV1SUVpqG7nKG5EhJOHC7m6B4Gh46cTseE
Oeb+8HCHmWNwZzzUtT3Yki1Jnp3Ttajjet/nU+3ouprznXk1Oz2835/fp9/+lgC8Mj5D9H6+5WGT
A02GQL1pkl5r0mm9TT7jvExqlXsR/3xvF0u7DeoJH82Bwjw8aazH7fpyVJb/govnfsTJo/sxe1aC
/EJrF3u7DeoJH82+vdthbazjgjJUlvVY8HeHPd0GdcbH1Y3Iu+O1Zs/uLXj80IKGulKYy87hwtlj
OHFECuJtBS/Yc/YXe6UCdSRRtQeRL7/W7MrbiPu3zbhhKUZFyRmcP3MExw8XIilxqvyyLbi5w3fd
hnbGR71d6Wxd4tj36lA7it+Rm9M2vaXqIkqLTuH0yUPYt3szpk+NlOlb2DP2lD1hBd2GdsZHXaBy
s5ZM9MKyQQ7XV2emorb6Utv+L5//CYcP7kRB3meYNiVcCiRcgq2sie1mNEhPtMafKLurADvK1vai
jYUebs/MQT6o0qmR7emCo9/no6z4NE4dP4BDhbnIz12P+HfDpEDCJbiRPWbfMlLnOjlZS+LiUJKQ
gN9iYlAUHo6iYANKgvxQHjAelQYfWELGojZwFG7oXLBZOxwHC7bg2A/52F+wGXlfrcXU6FApkHAJ
/oM9YvmM1DuUSmvlggUwp6WhYs4clCYmomJaLMyxRlRH+cMSPgF1oRo0GFS4M0mJB379sFXvhtyc
LOzZ+QW2fbkKMZHBcltKuAQ/ZA/YLsb/RGdna3lyMsqSkmCaMQOlcVNwJTYcVdGBsERoUWccg1sh
atwzDMXvwQPRGKrA0whCrsEV61ekYdP65Yg2BkmBLfw+u8e+Ye0rKo6KwmWjEZdDglES/DYqgibg
auAYXosH6v2H4a6/Eo8MjmgKt0fzFAWaZw1BS4onciK8kLV4HiIn+0uBLfwuu83aCzbx7o4TQfys
IPzqSCh2JlwZRrCMJDS8SXigJTSFEJpjHdD8gQotGRNRsygI6XEhWLdiPozBenmDyVok/BZrYDvZ
vwtO9yFccCKYXAhVwwl1noS74wiPAzg8miW7oyXTDzXLIpA+3YicNRlYvTQFoQE6KZC1yOQ32Q22
g70sOGFHONuPcGkwocyVcE1NuKlpn946mcNnDEJLujdqlxjbwj/PzsTarPn4aMFsBOl9peAOk8kl
/DprL5hGZE5nC+3InOlA5qz+ZF7lROZ1SjJvcCVzhS+9eBrJBe+7oyZVh/SEMOR8koF1K9OxcvFc
ZKTMRMBbPvKYkOnrmYTXsO3dvns746M+MY6amqPtYElUvUgM9ManqxYie3kaPs6ciyVp7yE1OQE6
Hy8psE0v4dfY192GdsZHfdKbmmrCej2PVvU/kBgf1RactWhOW/j0mLDWUSOGPVP07i13j+xeprew
KpbbU6jt2LGR+aOpMc6VL5doTOw7wchMTcLM+MjW0aNUzxUKxZ/8fbl7bOupZdWskm3rHCphohfr
zexZH6bRD2h7pvRnY3XjvTDaY0Srvb1CHsfyaJA3l0xvK5D1XGVX2NbO4RIqgRLkxJTMlfFHAamY
Oxvp4GDPNx1lsoWM7w1KZR+yFDavw9wOBluBTO3ABjIXJoEa5sN0zI9NZN7Mkw1nrzNHJldqZ9tE
V+1fXhYMYPKHEiBBEqhlUiKfaGPZG0yuxpnJ1SrY/xbIkRVJST8mRa8xuRpZkxjKpHwwk8n7srbp
2X+C24H+ARNK1NuvDsfUAAAAAElFTkSuQmCC')
	#endregion
	$buttonExit.ImageAlign = 'TopCenter'
	$buttonExit.Location = '558, 19'
	$buttonExit.Name = "buttonExit"
	$buttonExit.Size = '64, 45'
	$buttonExit.TabIndex = 7
	$buttonExit.Text = "Exit"
	$buttonExit.TextAlign = 'BottomCenter'
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	#
	# buttonProcess
	#
	$buttonProcess.Font = "Microsoft Sans Serif, 8.25pt"
	#region Binary Data
	$buttonProcess.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAAK/INwWK6QAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAXTSURBVEhLlVZ9MNRpHN+WlJcMc0RxNc7l
4oQbb70cKV1CnO50WrqiRjnMOTSOFSVdViydl7OOuiJrsV4X623z2sswdZUyGkfHtXXl6pjrqqtr
P/f9LU39cTQ+MzvP7vM838/3+b4va45Qnz9/vsfq1asLd+zYkbNw4UITPT29RHd39xgzMzNLOmdP
XZs7GEHHpUuXloaEhEz09vZCJpNNrF27Nn3dunXjVVVViszMzBH6vhPAlMQcYb148eKRpKQkEBnu
3buH38bGIJVKFZWVlbh08SLKRKJ/nZ2d900rmKeUehtUVVWZxVRfX7/Q39//RXl5Odra2tB/4wYk
Tc1o6u5Btewc8s8KkftDnsKfw6kzMTE57ejouI/k5hEY+Vmhb2ho2Jmamor+/n5MTk5icHAQFdJm
/PzgEVoHh1Bx5TqEw3eQXCvF4WMpSEtLQ3x8/Cgp+tDc3HyaZmZsJrOfNDQ0KBU8fvwYTfTi9jE5
uIKCl4H79iNXkA9ekRBH+ocRcaYMp06dQm5uLtzc3LiNjY3TNDNjl62t7ZODBw8iLy8PMnJPeUsr
RL+MKqxdPzn5rrHxBWZ/6NYtHCqvxZ72AcTz0rEnKKjNyspqg1wun6aZGdoUh0AbG5u/yGyIKypQ
0tIGfv8QHDlfhtO5C2XO5NUrV5BWXAa3xhHsT84EZ7vvd3SmDODboKGtrc318PB4xmTP+Pi4MrAJ
fQPwzRT0suaxNxoaGAymp/Lgn/YTrMpuI5KXjRMZ/EccDief5LWmaN6AioqKcqFi+oiIU7a4uz8p
Li5GXV0dHj58iF9v38bhsjoE9txWrD1aOGbi9sXf62OzsFI4CqvjTThDGdXa2oro6GgZ8bxWoKWl
xaLK1HRycvIgs1MOHDhwl7lYU1ODlJQUZGdng8mm5CNH0NjUhFhhM5xLb8JcJMfyojuwTpeBl1+E
fEEeqOjg6+ubqKyJBQsWsIiUpaGhbhYQEHC2ubn5SUZGBsTiSnR0dqG2rh6Jh5IQEvIVYmJi4Ofn
h7i4OIwMD6Or7yoEkk4U1Lahg1zXUF8PaiH3KTHSqOqXmJqaTr2czWavcnFxuSwWizExMYGbAwOo
FuahPicU9TwO8rm7cSwpAVnZOeByuSDrlPF4cP8+qsQVuHC+B2Njo2hvb4enp2chOUTp51fQICXl
oaGhShd095xHbREfQ/meGM1Yj8txDhiOsoB09yokRoYiLDwcJSUlSjI+n69gXNfS0sLsPYuKipJS
xjkUFjI6XkONAnvIwcHheVhYGBokdbh03Bs9UdbwcbJB9NdhyPl2Py4HmKLkM0uEh4UiMjISe/fu
HdDU1Dzt5eU1FBgY2GBhYeFPXNrq6upTrK9AGw7BwcHNEolEMUIZ0lZfhcFYOyS7GFxjsVXFdvb2
z0UUj5K4YHRtfgfc4F3gxh9EUFBQPz3sPaIwZGiUZP8HUlCVkJAAKms8IL92tTXhWrg1ftykf46O
GWHhvpAQFByNR7PTIiTs3IYTWVlMwH83MjJaScFU8swI6nilFHkwrZiJQaNUivpvvHDZ1+Cpn6lm
NF0JtbOzf8n//GM0rNFEQsgeHEvhKaiQOnR1dZcYGBhMEc2CXdQxa+jzaM2aNSgoLIREVAxZgCX6
vPSe8m215Gl2uooO50XI2GSBVB4PW7d6yYj8fXt7exbFYZpmZjDTSl1DQ0Ps7e0NZlrdkctRXy6E
KGwbJJ9+APEWU3zv54r8rBOopsIja/9YsWLFZjs7uymG2aCmpsYsNpaWlkMCgQBCoRC3qDuWikQo
KRVBUluD2uoq+l2Gk9SKmfOIiIhOHR0d4+XLlys5ZgUztdgqbH1aKzZs2KCgFFT4+Pj8Q/NWWbnd
3d1kVZ8yRomJiS+okiVUoStdXV2nGd6CN8aaASk5QpMolio7nP4lPE5PT0dOTg7TGv7cuHHjGWoB
geR7HWMj42mROYB6EdM2XmmzIRdcp9l6l/zcsWzZsu20pzY9o+cAFus/rKIjAj5Lrl0AAAAASUVO
RK5CYII=')
	#endregion
	$buttonProcess.ImageAlign = 'TopCenter'
	$buttonProcess.Location = '298, 19'
	$buttonProcess.Name = "buttonProcess"
	$buttonProcess.Size = '64, 45'
	$buttonProcess.TabIndex = 4
	$buttonProcess.Text = "Process"
	$buttonProcess.TextAlign = 'BottomCenter'
	$tooltip1.SetToolTip($buttonProcess, "Use Get-TSProcess to get a list of session processes from a local or remote computers.")
	$buttonProcess.UseVisualStyleBackColor = $True
	$buttonProcess.add_Click($buttonProcess_Click)
	#
	# richtextboxStatus
	#
	$richtextboxStatus.Dock = 'Bottom'
	$richtextboxStatus.Font = "Consolas, 8.25pt"
	$richtextboxStatus.Location = '0, 231'
	$richtextboxStatus.Name = "richtextboxStatus"
	$richtextboxStatus.Size = '634, 71'
	$richtextboxStatus.TabIndex = 8
	$richtextboxStatus.Text = ""
	#
	# statusstrip1
	#
	[void]$statusstrip1.Items.Add($toolstripstatuslabel1)
	[void]$statusstrip1.Items.Add($toolstripstatuslabel2)
	$statusstrip1.Location = '0, 302'
	$statusstrip1.Name = "statusstrip1"
	$statusstrip1.RenderMode = 'Professional'
	$statusstrip1.Size = '634, 22'
	$statusstrip1.TabIndex = 12
	$statusstrip1.Text = "statusstrip1"
	#
	# tooltip1
	#
	#
	# helpprovider1
	#
	#
	# contextmenustripTSSession
	#
	[void]$contextmenustripTSSession.Items.Add($sendTSSessionToolStripMenuItem)
	[void]$contextmenustripTSSession.Items.Add($disconnectTSSessionToolStripMenuItem)
	[void]$contextmenustripTSSession.Items.Add($stopTSSessionToolStripMenuItem)
	$contextmenustripTSSession.Name = "contextmenustrip1"
	$contextmenustripTSSession.RenderMode = 'System'
	$contextmenustripTSSession.ShowImageMargin = $False
	$contextmenustripTSSession.Size = '151, 48'
	$contextmenustripTSSession.Text = "TSSession"
	#
	# disconnectTSSessionToolStripMenuItem
	#
	$disconnectTSSessionToolStripMenuItem.Name = "disconnectTSSessionToolStripMenuItem"
	$disconnectTSSessionToolStripMenuItem.Size = '150, 22'
	$disconnectTSSessionToolStripMenuItem.Text = "Disconnect Session"
	$disconnectTSSessionToolStripMenuItem.add_Click($disconnectTSSessionToolStripMenuItem_Click)
	#
	# sendTSSessionToolStripMenuItem
	#
	$sendTSSessionToolStripMenuItem.Name = "sendTSSessionToolStripMenuItem"
	$sendTSSessionToolStripMenuItem.Size = '150, 22'
	$sendTSSessionToolStripMenuItem.Text = "Send Message"
	$sendTSSessionToolStripMenuItem.ToolTipText = "Displays a message box to the selected session ID"
	$sendTSSessionToolStripMenuItem.add_Click($sendTSSessionToolStripMenuItem_Click)
	#
	# contextmenustripTSProcess
	#
	[void]$contextmenustripTSProcess.Items.Add($sendTSMessageToolStripMenuItem)
	[void]$contextmenustripTSProcess.Items.Add($stopTSProcessToolStripMenuItem)
	$contextmenustripTSProcess.Name = "contextmenustripTSProcess"
	$contextmenustripTSProcess.RenderMode = 'System'
	$contextmenustripTSProcess.ShowImageMargin = $False
	$contextmenustripTSProcess.Size = '125, 26'
	#
	# sendTSMessageToolStripMenuItem
	#
	$sendTSMessageToolStripMenuItem.Name = "sendTSMessageToolStripMenuItem"
	$sendTSMessageToolStripMenuItem.Size = '124, 22'
	$sendTSMessageToolStripMenuItem.Text = "Send Message"
	$sendTSMessageToolStripMenuItem.ToolTipText = "Displays a message box to the selected session ID"
	$sendTSMessageToolStripMenuItem.add_Click($sendTSSessionToolStripMenuItem_Click)
	#
	# stopTSProcessToolStripMenuItem
	#
	$stopTSProcessToolStripMenuItem.Name = "stopTSProcessToolStripMenuItem"
	$stopTSProcessToolStripMenuItem.Size = '124, 22'
	$stopTSProcessToolStripMenuItem.Text = "Stop Process"
	$stopTSProcessToolStripMenuItem.ToolTipText = "Use Stop-TSProcess to terminate one or more processes"
	$stopTSProcessToolStripMenuItem.add_Click($stopTSProcessToolStripMenuItem_Click)
	#
	# stopTSSessionToolStripMenuItem
	#
	$stopTSSessionToolStripMenuItem.Name = "stopTSSessionToolStripMenuItem"
	$stopTSSessionToolStripMenuItem.Size = '150, 22'
	$stopTSSessionToolStripMenuItem.Text = "Stop Session"
	$stopTSSessionToolStripMenuItem.add_Click($stopTSSessionToolStripMenuItem_Click)
	#
	# toolstripstatuslabel1
	#
	$toolstripstatuslabel1.Font = "Segoe UI, 9pt, style=Bold"
	$toolstripstatuslabel1.IsLink = $True
	$toolstripstatuslabel1.Name = "toolstripstatuslabel1"
	$toolstripstatuslabel1.Size = '116, 17'
	$toolstripstatuslabel1.Text = "LazyWinAdmin.com"
	$toolstripstatuslabel1.add_Click($toolstripstatuslabel1_Click)
	#
	# toolstripstatuslabel2
	#
	$toolstripstatuslabel2.Font = "Segoe UI, 9pt, style=Bold"
	$toolstripstatuslabel2.Name = "toolstripstatuslabel2"
	$toolstripstatuslabel2.Size = '114, 17'
	$toolstripstatuslabel2.Text = "Francois-Xavier Cat"
	$groupbox1.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()
}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#requires -version 3
	
	
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	#Location of the script
	function Get-ScriptDirectory
	{ 
		if($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	# PSTerminalServices Module Requirements
	# Get the path of the DLL file: Cassia.dll (.net library)
	$CassiaPath = Join-Path -Path (Get-ScriptDirectory) -ChildPath "Cassia.dll"
	# Load the DLL
	if (-not(Test-Path $CassiaPath)){Write-Warning -Message "The file Cassia.dll is missing. The Script can't continue without this file";exit}
	[Reflection.Assembly]::LoadFile($CassiaPath) | Out-Null
	
	
	function Append-RichtextboxStatus{
		PARAM(
		[Parameter(Mandatory=$true)]
		[string]$Message,
		[string]$MessageColor = "DarkGreen",
		[string]$DateTimeColor="Black",
		[string]$Source,
		[string]$SourceColor="Gray",
		[string]$ComputerName,
		[String]$ComputerNameColor= "Blue")
		
		$SortableTime = get-date -Format "yyyy-MM-dd HH:mm:ss"
		$richtextboxStatus.SelectionColor = $DateTimeColor
		$richtextboxStatus.AppendText("[$SortableTime] ")
		
		IF ($PSBoundParameters['ComputerName']){
			$richtextboxStatus.SelectionColor = $ComputerNameColor
			$richtextboxStatus.AppendText(("$ComputerName ").ToUpper())
		}
		
		IF ($PSBoundParameters['Source']){
			$richtextboxStatus.SelectionColor = $SourceColor
			$richtextboxStatus.AppendText("$Source ")
		}
		
		$richtextboxStatus.SelectionColor = $MessageColor
		$richtextboxStatus.AppendText("$Message`r")
		$richtextboxStatus.Refresh()
		$richtextboxStatus.ScrollToCaret()
		
		Write-Verbose -Message "$SortableTime $Message"
	}
	
	function Set-DataGridView
	{
		PARAM (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			
			[Parameter(ParameterSetName = "AlternativeRowColor")]
			[Switch]$AlternativeRowColor,
			
			[Parameter(Mandatory = $true, ParameterSetName = "AlternativeRowColor")]
			[System.Drawing.Color]$ForeColor,
			
			[Parameter(Mandatory = $true, ParameterSetName = "AlternativeRowColor")]
			[System.Drawing.Color]$BackColor,
			
			[Parameter(ParameterSetName = "Proper")]
			[Switch]$ProperFormat
		)
		PROCESS
		{
			if ($psboundparameters['AlternativeRowColor'])
			{
				$DataGridView.AlternatingRowsDefaultCellStyle.ForeColor = $ForeColor
				$DataGridView.AlternatingRowsDefaultCellStyle.BackColor = $BackColor
			}
			
			
			if ($psboundparameters['ProperFormat'])
			{
				#$Font = New-Object -TypeName System.Drawing.Font -ArgumentList "Segoi UI", 10
				$Font = New-Object -TypeName System.Drawing.Font -ArgumentList "Consolas", 10
				#[System.Drawing.FontStyle]::Bold
				
				$DataGridView.ColumnHeadersBorderStyle = 'Raised'
				$DataGridView.BorderStyle = 'Fixed3D'
				$DataGridView.SelectionMode = 'FullRowSelect'
				$DataGridView.AllowUserToResizeRows = $false
				$datagridview.DefaultCellStyle.font = $Font
			}
		}
		
	}
	
	# SAPIEN Cmdlets/Functions
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($Table -eq $null)
		{
			$Table = New-Object System.Data.DataTable
		}
	
		if($InputObject-is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		else
		{
			if(-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
	
				if($InputObject -eq $null){ return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach($item in $InputObject)
				{
					if($item -ne $null)
					{
						$object = $item
						break	
					}
				}
	
				if($object -eq $null) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if(-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if($prop.Value -ne $null)
						{
							try{ $type = $prop.Value.GetType() } catch {}
						}
	
						if($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
			      			[void]$table.Columns.Add($prop.Name, $type) 
						}
						else #Type info not found
						{ 
							[void]$table.Columns.Add($prop.Name) 	
						}
					}
			    }
				
				if($object -is [System.Data.DataRow])
				{
					foreach($item in $InputObject)
					{	
						$Table.Rows.Add($item)
					}
					return  @(,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()	
			}
			
			foreach($item in $InputObject)
			{		
				$row = $table.NewRow()
				
				if($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
	
		return @(,$Table)	
	}
	
	function Load-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The ComboBox control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the ComboBox's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{	
				$array.Add($Item)	
			}
			$DataGridView.DataSource = $array
		}
		
		$DataGridView.ResumeLayout()
	}
	
	# PSTerminalServices Module by Shay Levy
	$script:Server='localhost'
	function Get-TSSession
	{
		<#
		.SYNOPSIS
			Lists the sessions on a given terminal server.
	
		.DESCRIPTION
			Use Get-TSSession to get a list of sessions from a local or remote computers.
			Note that Get-TSSession is using Aliased properties to display the output on the console (IPAddress and State), these attributes
			are not the same as the original attributes (ClientIPAddress and ConnectionState).
			This is important when you want to use the -Filter parameter which requires the latter.
			To see all aliassed properties and their corresponding properties (Definition column), pipe the result to Get-Member:
	
			PS > Get-TSSession | Get-Member -MemberType AliasProperty
	
			   TypeName: Cassia.Impl.TerminalServicesSession
	
			Name      MemberType    Definition
			----      ----------    ----------
			(...)
			IPAddress AliasProperty IPAddress = ClientIPAddress
			State     AliasProperty State = ConnectionState
	
	
		.PARAMETER ComputerName
		    	The name of the terminal server computer. The default is the local computer. Default value is the local computer (localhost).
	
		.PARAMETER Id
			Specifies the session Id number.
	
		.PARAMETER InputObject
			   Specifies a session object. Enter a variable that contains the object, or type a command or expression that gets the sessions.
	
		.PARAMETER Filter
			   Specifies a filter based on the session properties. The syntax of the filter, including the use of
			   wildcards and depends on the properties of the session. Internally, The Filter parameter uses client side
			   filtering using the Where-Object cmdlet, objects are filtered after they are retrieved.
	
		.PARAMETER State
			The connection state of the session. Use this parameter to get sessions of a specific state. Valid values are:
	
			Value		 Description
			-----		 -----------
			Active		 A user is logged on to the session.
			ConnectQuery The session is in the process of connecting to a client.
			Connected	 A client is connected to the session).
			Disconnected The session is active, but the client has disconnected from it.
			Down		 The session is down due to an error.
			Idle		 The session is waiting for a client to connect.
			Initializing The session is initializing.
			Listening 	 The session is listening for connections.
			Reset		 The session is being reset.
			Shadowing	 This session is shadowing another session.
	
		.PARAMETER ClientName
			The name of the machine last connected to a session.
			Use this parameter to get sessions made from a specific computer name. Wildcrads are permitted.
	
		.PARAMETER UserName
			Use this parameter to get sessions made by a specific user name. Wildcrads are permitted.
	
		.EXAMPLE
			Get-TSSession
	
			Description
			-----------
			Gets all the sessions from the local computer.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 -State Disconnected
	
			Description
			-----------
			Gets all the disconnected sessions from the remote computer 'comp1'.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 -Filter {$_.ClientIPAddress -like '10*' -AND $_.ConnectionState -eq 'Active'}
	
			Description
			-----------
			Gets all Active sessions from remote computer 'comp1', made from ip addresses that starts with '10'.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 -UserName a*
	
			Description
			-----------
			Gets all sessions from remote computer 'comp1' made by users with name starts with the letter 'a'.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 -ClientName s*
	
			Description
			-----------
			Gets all sessions from remote computer 'comp1' made from a computers names that starts with the letter 's'.
	
		.OUTPUTS
			Cassia.Impl.TerminalServicesSession
	
		.COMPONENT
			TerminalServer
	
		.NOTES
			Author: Shay Levy
			Blog  : http://blogs.microsoft.co.il/blogs/ScriptFanatic/
	
		.LINK
			http://code.msdn.microsoft.com/PSTerminalServices
	
		.LINK
			http://code.google.com/p/cassia/
	
		.LINK
			Stop-TSSession
			Disconnect-TSSession
			Send-TSMessage
		#>
	
	
		[OutputType('Cassia.Impl.TerminalServicesSession')]
		[CmdletBinding(DefaultParameterSetName='Session')]
	
		Param(
	
			[Parameter()]
			[Alias('CN','IPAddress')]
			[System.String]$ComputerName,
	
			[Parameter(
				Position=0,
				ValueFromPipelineByPropertyName=$true,
				ParameterSetName='Session'
			)]
			[Alias('SessionID')]
			[ValidateRange(0,65536)]
			[System.Int32]$Id=-1,
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				ValueFromPipeline=$true,
				ParameterSetName='InputObject'
			)]
			[Cassia.Impl.TerminalServicesSession]$InputObject,
	
			[Parameter(
				Mandatory=$true,
				ParameterSetName='Filter'
			)]
			[ScriptBlock]$Filter,
	
			[Parameter()]
			[ValidateSet('Active','Connected','ConnectQuery','Shadowing','Disconnected','Idle','Listening','Reset','Down','Initializing')]
			[Alias('ConnectionState')]
			[System.String]$State='*',
	
			[Parameter()]
			[System.String]$ClientName='*',
	
			[Parameter()]
			[System.String]$UserName='*'
		)
	
	
		begin
		{
			try
			{
				$FuncName = $MyInvocation.MyCommand
				Write-Verbose "[$funcName] Entering Begin block."
	
				if(!$ComputerName)
				{
					Write-Verbose "[$funcName] $ComputerName is not defined, loading global value '$script:Server'."
					$ComputerName = Get-TSGlobalServerName
				}
				else
				{
					$ComputerName = Set-TSGlobalServerName -ComputerName $ComputerName
				}
	
	
				Write-Verbose "[$FuncName] Attempting remote connection to '$ComputerName'"
				$TSManager = New-Object Cassia.TerminalServicesManager
				$TSRemoteServer = $TSManager.GetRemoteServer($ComputerName)
				$TSRemoteServer.Open()
	
				if(!$TSRemoteServer.IsOpen)
				{
					Throw 'Connection to remote server is not open. Use Connect-TSServer to connect first.'
				}
	
				Write-Verbose "[$FuncName] Connection is open '$ComputerName'"
				Write-Verbose "[$FuncName] Updating global Server name '$ComputerName'"
				$null = Set-TSGlobalServerName -ComputerName $ComputerName
			}
			catch
			{
				Throw
			}
		}
	
	
		Process
		{
	
			Write-Verbose "[$funcName] Entering Process block."
	
			try
			{
				if($PSCmdlet.ParameterSetName -eq 'Session')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					if($Id -lt 0)
					{
						$session = $TSRemoteServer.GetSessions()
					}
					else
					{
						$session = $TSRemoteServer.GetSession($Id)
					}
				}
	
				if($PSCmdlet.ParameterSetName -eq 'InputObject')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					$session = $InputObject
				}
	
				if($PSCmdlet.ParameterSetName -eq 'Filter')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
	
					$TSRemoteServer.GetSessions() | Where-Object $Filter
				}
	
				if($session)
				{
					$session | Where-Object {$_.ConnectionState -like $State -AND $_.UserName -like $UserName -AND $_.ClientName -like $ClientName } | `
					Add-Member -MemberType AliasProperty -Name IPAddress -Value ClientIPAddress -PassThru | `
					Add-Member -MemberType AliasProperty -Name State -Value ConnectionState -PassThru
				}
			}
			catch
			{
				Throw
			}
		}
	
		end
		{
			try
			{
				Write-Verbose "[$funcName] Entering End block."
				Write-Verbose "[$funcName] Disconnecting from remote server '$($TSRemoteServer.ServerName)'"
				$TSRemoteServer.Close()
				$TSRemoteServer.Dispose()
			}
			catch
			{
				Throw
			}
		}
	}
	
	function Disconnect-TSSession
	{
	
		<#
		.SYNOPSIS
			Disconnects any connected user from the session.
	
		.DESCRIPTION
			Disconnect-TSSession disconnects any connected user from a session on local or remote computers.
	
		.PARAMETER ComputerName
		    	The name of the terminal server computer. The default is the local computer. Default value is the local computer (localhost).
	
		.PARAMETER Id
			Specifies the session Id number.
	
		.PARAMETER InputObject
			   Specifies a session object. Enter a variable that contains the object, or type a command or expression that gets the sessions.
	
		.PARAMETER Synchronous
		       When the Synchronous parameter is present the command waits until the session is fully disconnected otherwise it returns
		       immediately, even though the session may not be completely disconnected yet.
	
		.PARAMETER Force
		       Overrides any confirmations made by the command.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 | Disconnect-TSSession
	
			Description
			-----------
			Disconnects all connected users from Active sessions on remote computer 'comp1'. The caller is prompted to
			By default, the caller is prompted to confirm each action.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 -State Active | Disconnect-TSSession -Force
	
			Description
			-----------
			Disconnects any connected user from Active sessions on remote computer 'comp1'.
			By default, the caller is prompted to confirm each action. To override confirmations, the Force Switch parameter is specified.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 -State Active -Synchronous | Disconnect-TSSession -Force
	
			Description
			-----------
			Disconnects any connected user from Active sessions on remote computer 'comp1'. The Synchronous parameter tells the command to
			wait until the session is fully disconnected and only tghen it proceeds to the next session object.
			By default, the caller is prompted to confirm each action. To override confirmations, the Force Switch parameter is specified.
	
		.OUTPUTS
	
		.COMPONENT
			TerminalServer
	
		.NOTES
			Author: Shay Levy
			Blog  : http://blogs.microsoft.co.il/blogs/ScriptFanatic/
	
		.LINK
			http://code.msdn.microsoft.com/PSTerminalServices
	
		.LINK
			http://code.google.com/p/cassia/
	
		.LINK
			Get-TSSession
			Stop-TSSession
			Send-TSMessage
		#>
	
		[CmdletBinding(SupportsShouldProcess=$true,ConfirmImpact='High',DefaultParameterSetName='Id')]
	
		Param(
	
			[Parameter()]
			[Alias('CN','IPAddress')]
			[System.String]$ComputerName=$script:server,
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				ParameterSetName='Id',
				ValueFromPipelineByPropertyName=$true
			)]
			[Alias('SessionId')]
			[System.Int32]$Id,
	
			[Parameter(
				Mandatory=$true,
				ValueFromPipeline=$true,
				ParameterSetName='InputObject'
			)]
			[Cassia.Impl.TerminalServicesSession]$InputObject,
	
			[switch]$Synchronous,
	
			[switch]$Force
		)
	
		begin
		{
			try
			{
				$FuncName = $MyInvocation.MyCommand
				Write-Verbose "[$funcName] Entering Begin block."
	
				if(!$ComputerName)
				{
					Write-Verbose "[$funcName] $ComputerName is not defined, loading global value '$script:Server'."
					$ComputerName = Get-TSGlobalServerName
				}
				else
				{
					$ComputerName = Set-TSGlobalServerName -ComputerName $ComputerName
				}
	
				Write-Verbose "[$FuncName] Attempting remote connection to '$ComputerName'"
				$TSManager = New-Object Cassia.TerminalServicesManager
				$TSRemoteServer = $TSManager.GetRemoteServer($ComputerName)
				$TSRemoteServer.Open()
	
				if(!$TSRemoteServer.IsOpen)
				{
					Throw 'Connection to remote server is not open. Use Connect-TSServer to connect first.'
				}
	
				Write-Verbose "[$FuncName] Connection is open '$ComputerName'"
				Write-Verbose "[$FuncName] Updating global Server name '$ComputerName'"
				$null = Set-TSGlobalServerName -ComputerName $ComputerName
			}
			catch
			{
				Throw
			}
		}
	
	
		Process
		{
	
			Write-Verbose "[$funcName] Entering Process block."
	
			try
			{
				if($PSCmdlet.ParameterSetName -eq 'Id')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					$session = $TSRemoteServer.GetSession($Id)
				}
	
				if($PSCmdlet.ParameterSetName -eq 'InputObject')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					$session  = $InputObject
				}
	
	
				if($session -ne $null)
				{
					if($Force -or $PSCmdlet.ShouldProcess($TSRemoteServer.ServerName,"Disconnecting session id '$($session.sessionId)'"))
					{
						if($session.ConnectionState -ne 'Disconnected')
						{
							$session.Disconnect($Synchronous)
						}
						else
						{
							Write-Verbose 'Session is already in Disconnected mode.'
						}
					}
				}
			}
			catch
			{
				Throw
			}
		}
	
		end
		{
			try
			{
				Write-Verbose "[$funcName] Entering End block."
				Write-Verbose "[$funcName] Disconnecting from remote server '$($TSRemoteServer.ServerName)'"
				$TSRemoteServer.Close()
				$TSRemoteServer.Dispose()
			}
			catch
			{
				Throw
			}
		}
	}
	
	function Stop-TSSession
	{
	
		<#
		.SYNOPSIS
			Logs the session off, disconnecting any user that might be connected.
	
		.DESCRIPTION
			Use Stop-TSSession to logoff the session and disconnect any user that might be connected.
	
		.PARAMETER ComputerName
		    	The name of the terminal server computer. The default is the local computer. Default value is the local computer (localhost).
	
		.PARAMETER Id
			Specifies the session Id number.
	
		.PARAMETER InputObject
			   Specifies a session object. Enter a variable that contains the object, or type a command or expression that gets the sessions.
	
		.PARAMETER Synchronous
		       When the Synchronous parameter is present the command waits until the session is fully disconnected otherwise it returns
		       immediately, even though the session may not be completely disconnected yet.
	
		.PARAMETER Force
		       Overrides any confirmations made by the command.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 | Stop-TSSession
	
			Description
			-----------
			logs off all connected users from Active sessions on remote computer 'comp1'. The caller is prompted to
			By default, the caller is prompted to confirm each action.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 -State Active | Stop-TSSession -Force
	
			Description
			-----------
			logs off any connected user from Active sessions on remote computer 'comp1'.
			By default, the caller is prompted to confirm each action. To override confirmations, the Force Switch parameter is specified.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 -State Active -Synchronous | Stop-TSSession -Force
	
			Description
			-----------
			logs off any connected user from Active sessions on remote computer 'comp1'. The Synchronous parameter tells the command to
			wait until the session is fully disconnected and only tghen it proceeds to the next session object.
			By default, the caller is prompted to confirm each action. To override confirmations, the Force Switch parameter is specified.
	
		.OUTPUTS
	
		.COMPONENT
			TerminalServer
	
		.NOTES
			Author: Shay Levy
			Blog  : http://blogs.microsoft.co.il/blogs/ScriptFanatic/
	
		.LINK
			http://code.msdn.microsoft.com/PSTerminalServices
	
		.LINK
			http://code.google.com/p/cassia/
	
		.LINK
			Get-TSSession
			Disconnect-TSSession
			Send-TSMessage
		#>
	
		[CmdletBinding(SupportsShouldProcess=$true,ConfirmImpact='High',DefaultParameterSetName='Id')]
	
		Param(
	
			[Parameter()]
			[Alias('CN','IPAddress')]
			[System.String]$ComputerName=$script:server,
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				ParameterSetName='Id',
				ValueFromPipelineByPropertyName=$true
			)]
			[Alias('SessionId')]
			[System.Int32]$Id,
	
			[Parameter(
				Mandatory=$true,
				ValueFromPipeline=$true,
				ParameterSetName='InputObject'
			)]
			[Cassia.Impl.TerminalServicesSession]$InputObject,
	
			[switch]$Synchronous,
	
			[switch]$Force
		)
	
		begin
		{
			try
			{
				$FuncName = $MyInvocation.MyCommand
				Write-Verbose "[$funcName] Entering Begin block."
	
				if(!$ComputerName)
				{
					Write-Verbose "[$funcName] $ComputerName is not defined, loading global value '$script:Server'."
					$ComputerName = Get-TSGlobalServerName
				}
				else
				{
					$ComputerName = Set-TSGlobalServerName -ComputerName $ComputerName
				}
	
				Write-Verbose "[$FuncName] Attempting remote connection to '$ComputerName'"
				$TSManager = New-Object Cassia.TerminalServicesManager
				$TSRemoteServer = $TSManager.GetRemoteServer($ComputerName)
				$TSRemoteServer.Open()
	
				if(!$TSRemoteServer.IsOpen)
				{
					Throw 'Connection to remote server is not open. Use Connect-TSServer to connect first.'
				}
	
				Write-Verbose "[$FuncName] Connection is open '$ComputerName'"
				Write-Verbose "[$FuncName] Updating global Server name '$ComputerName'"
				$null = Set-TSGlobalServerName -ComputerName $ComputerName
			}
			catch
			{
				Throw
			}
		}
	
	
	
		Process
		{
	
			Write-Verbose "[$funcName] Entering Process block."
	
			try
			{
	
				if($PSCmdlet.ParameterSetName -eq 'Id')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					$session = $TSRemoteServer.GetSession($Id)
				}
	
				if($PSCmdlet.ParameterSetName -eq 'InputObject')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					$session  = $InputObject
				}
	
				if($session -ne $null)
				{
					if($Force -or $PSCmdlet.ShouldProcess($TSRemoteServer.ServerName,"Logging off session id '$($session.sessionId)'"))
					{
						Write-Verbose "[$FuncName] Logging off session '$($session.SessionId)'"
						$session.Logoff($Synchronous)
					}
				}
			}
			catch
			{
				Throw
			}
		}
	
	
		end
		{
			try
			{
				Write-Verbose "[$funcName] Entering End block."
				Write-Verbose "[$funcName] Disconnecting from remote server '$($TSRemoteServer.ServerName)'"
				$TSRemoteServer.Close()
				$TSRemoteServer.Dispose()
			}
			catch
			{
				Throw
			}
		}
	}
	
	function Get-TSProcess
	{
	
		<#
		.SYNOPSIS
			Gets a list of processes running in a specific session or in all sessions.
	
		.DESCRIPTION
			Use Get-TSProcess to get a list of session processes from a local or remote computers.
	
		.PARAMETER ComputerName
		    	The name of the terminal server computer. The default is the local computer. Default value is the local computer (localhost).
	
		.PARAMETER Id
			Specifies the process Id number.
	
		.PARAMETER InputObject
			   Specifies a process object. Enter a variable that contains the object, or type a command or expression that gets the sessions.
	
		.PARAMETER Name
			   Specifies the process name. Wildcards are permitted.
	
		.PARAMETER Session
			Specifies the session Id number.
	
		.EXAMPLE
			Get-TSProcess
	
			Description
			-----------
			Gets all the sessions processes from the local computer.
	
		.EXAMPLE
			Get-TSSession -Id 0 -ComputerName comp1 | Get-TSProcess
	
			Description
			-----------
			Gets all processes connected to session id 0 from remote computer 'comp1'.
	
		.EXAMPLE
			Get-TSProcess -Name s* -ComputerName comp1
	
			Description
			-----------
			Gets all the processes with name starts with the letter 's' from remote computer 'comp1'.
	
		.OUTPUTS
			Cassia.Impl.TerminalServicesProcess
	
		.COMPONENT
			TerminalServer
	
		.NOTES
			Author: Shay Levy
			Blog  : http://blogs.microsoft.co.il/blogs/ScriptFanatic/
	
		.LINK
			http://code.msdn.microsoft.com/PSTerminalServices
	
		.LINK
			http://code.google.com/p/cassia/
	
		.LINK
			Get-TSSession
			Stop-TSProcess
		#>
	
	
		[OutputType('Cassia.Impl.TerminalServicesProcess')]
		[CmdletBinding(DefaultParameterSetName='Name')]
	
		Param(
	
			[Parameter()]
			[Alias('CN','IPAddress')]
			[System.String]$ComputerName=$script:server,
	
			[Parameter(
				Position=0,
				ValueFromPipelineByPropertyName=$true,
				ParameterSetName='Name'
			)]
			[Alias('ProcessName')]
			[System.String]$Name='*',
	
			[Parameter(
				Mandatory=$true,
				ValueFromPipeline=$true,
				ValueFromPipelineByPropertyName=$true,
				ParameterSetName='Id'
			)]
			[Alias('ProcessID')]
			[ValidateRange(0,65536)]
			[System.Int32]$Id=-1,
	
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				ValueFromPipeline=$true,
				ParameterSetName='InputObject'
			)]
			[Cassia.Impl.TerminalServicesProcess]$InputObject,
	
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				ValueFromPipeline=$true,
				ParameterSetName='Session'
			)]
			[Alias('SessionId')]
			[Cassia.Impl.TerminalServicesSession]$Session
		)
	
	
	
		begin
		{
			$FuncName = $MyInvocation.MyCommand
			Write-Verbose "[$funcName] Entering Begin block."
	
			if(!$ComputerName)
			{
				Write-Verbose "[$funcName] $ComputerName is not defined, loading global value '$script:Server'."
				$ComputerName = Get-TSGlobalServerName
			}
			else
			{
				$ComputerName = Set-TSGlobalServerName -ComputerName $ComputerName
			}
	
			Write-Verbose "[$FuncName] Attempting remote connection to '$ComputerName'"
			$TSManager = New-Object Cassia.TerminalServicesManager
			$TSRemoteServer = $TSManager.GetRemoteServer($ComputerName)
			$TSRemoteServer.Open()
	
			if(!$TSRemoteServer.IsOpen)
			{
				Throw 'Connection to remote server is not open. Use Connect-TSServer to connect first.'
			}
	
			Write-Verbose "[$FuncName] Connection is open '$ComputerName'"
			Write-Verbose "[$FuncName] Updating global Server name '$ComputerName'"
			$null = Set-TSGlobalServerName -ComputerName $ComputerName
		}
	
	
	
		Process
		{
	
			Write-Verbose "[$funcName] Entering Process block."
	
			try
			{
	
				if($PSCmdlet.ParameterSetName -eq 'Name')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					if($Name -eq '*')
					{
						$proc = $TSRemoteServer.GetProcesses()
					}
					else
					{
						$proc = $TSRemoteServer.GetProcesses() | Where-Object {$_.ProcessName -like $Name}
					}
				}
	
				if($PSCmdlet.ParameterSetName -eq 'Id')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					if($Id -lt 0)
					{
						$proc = $TSRemoteServer.GetProcesses()
					}
					else
					{
						$proc = $TSRemoteServer.GetProcess($Id)
					}
				}
	
	
				if($PSCmdlet.ParameterSetName -eq 'Session')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					if($Session)
					{
						$proc = $Session.GetProcesses()
					}
				}
	
	
				if($PSCmdlet.ParameterSetName -eq 'InputObject')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					$proc = $InputObject
				}
	
	
				if($proc)
				{
					$proc
				}
			}
			catch
			{
				Throw
			}
		}
	
	
		end
		{
			try
			{
				Write-Verbose "[$funcName] Entering End block."
				Write-Verbose "[$funcName] Disconnecting from remote server '$($TSRemoteServer.ServerName)'"
				$TSRemoteServer.Close()
				$TSRemoteServer.Dispose()
			}
			catch
			{
				Throw
			}
		}
	}
	
	function Stop-TSProcess
	{
	
		<#
		.SYNOPSIS
			Terminates the process running in a specific session or in all sessions.
	
		.DESCRIPTION
			Use Stop-TSProcess to terminate one or more processes from a local or remote computers.
	
		.PARAMETER ComputerName
		    	The name of the terminal server computer. The default is the local computer. Default value is the local computer (localhost).
	
		.PARAMETER Id
			Specifies the process Id number.
	
		.PARAMETER InputObject
			Specifies a process object. Enter a variable that contains the object, or type a command or expression that gets the sessions.
	
		.PARAMETER Name
			Specifies the process name.
	
		.PARAMETER Session
			Specifies the session Id number.
	
		.PARAMETER Force
		       Overrides any confirmations made by the command.
	
		.EXAMPLE
			 Get-TSProcess -Id 6552 | Stop-TSProcess
	
			Description
			-----------
			Gets process Id 6552 from the local computer and stop it. Confirmations needed.
	
		.EXAMPLE
			Get-TSSession -Id 3 -ComputerName comp1 | Stop-TSProcess -Force
	
			Description
			-----------
			Terminats all processes connected to session id 3 from remote computer 'comp1', suppress confirmations.
	
		.OUTPUTS
			Cassia.Impl.TerminalServicesProcess
	
		.COMPONENT
			TerminalServer
	
		.NOTES
			Author: Shay Levy
			Blog  : http://blogs.microsoft.co.il/blogs/ScriptFanatic/
	
		.LINK
			http://code.msdn.microsoft.com/PSTerminalServices
	
		.LINK
			http://code.google.com/p/cassia/
	
		.LINK
			Get-TSProcess
			Get-TSSession
		#>
	
		[CmdletBinding(SupportsShouldProcess=$true,ConfirmImpact='High',DefaultParameterSetName='Name')]
	
		Param(
			[Parameter()]
			[Alias('CN','IPAddress')]
			[System.String]$ComputerName=$script:server,
	
			[Parameter(
				Position=0,
				ValueFromPipelineByPropertyName=$true,
				ParameterSetName='Name'
			)]
			[Alias("ProcessName")]
			[System.String]$Name='*',
	
			[Parameter(
				Mandatory=$true,
				ValueFromPipeline=$true,
				ValueFromPipelineByPropertyName=$true,
				ParameterSetName='Id'
			)]
			[Alias('ProcessID')]
			[ValidateRange(0,65536)]
			[System.Int32]$Id=-1,
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				ValueFromPipeline=$true,
				ParameterSetName='InputObject'
			)]
			[Cassia.Impl.TerminalServicesProcess]$InputObject,
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				ValueFromPipeline=$true,
				ParameterSetName='Session'
			)]
			[Alias('SessionId')]
			[Cassia.Impl.TerminalServicesSession]$Session,
	
			[switch]$Force
		)
	
	
		begin
		{
			try
			{
				$FuncName = $MyInvocation.MyCommand
				Write-Verbose "[$funcName] Entering Begin block."
	
				if(!$ComputerName)
				{
					Write-Verbose "[$funcName] $ComputerName is not defined, loading global value '$script:Server'."
					$ComputerName = Get-TSGlobalServerName
				}
				else
				{
					$ComputerName = Set-TSGlobalServerName -ComputerName $ComputerName
				}
	
				Write-Verbose "[$FuncName] Attempting remote connection to '$ComputerName'"
				$TSManager = New-Object Cassia.TerminalServicesManager
				$TSRemoteServer = $TSManager.GetRemoteServer($ComputerName)
				$TSRemoteServer.Open()
	
				if(!$TSRemoteServer.IsOpen)
				{
					Throw 'Connection to remote server is not open. Use Connect-TSServer to connect first.'
				}
	
				Write-Verbose "[$FuncName] Connection is open '$ComputerName'"
				Write-Verbose "[$FuncName] Updating global Server name '$ComputerName'"
				$null = Set-TSGlobalServerName -ComputerName $ComputerName
			}
			catch
			{
				Throw
			}
		}
	
	
		Process
		{
	
			Write-Verbose "[$funcName] Entering Process block."
	
			try
			{
	
				if($PSCmdlet.ParameterSetName -eq 'Name')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					if($Name -eq '*')
					{
						$proc = $TSRemoteServer.GetProcesses()
					}
					else
					{
						$proc = $TSRemoteServer.GetProcesses() | Where-Object {$_.ProcessName -like $Name}
					}
				}
	
				if($PSCmdlet.ParameterSetName -eq 'Id')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					if($Id -lt 0)
					{
						$proc = $TSRemoteServer.GetProcesses()
					}
					else
					{
						$proc = $TSRemoteServer.GetProcess($Id)
					}
				}
	
	
				if($PSCmdlet.ParameterSetName -eq 'Session')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					if($Session)
					{
						$proc = $Session.GetProcesses()
					}
				}
	
	
				if($PSCmdlet.ParameterSetName -eq 'InputObject')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					$proc = $InputObject
				}
	
	
				if($proc)
				{
					foreach($p in $proc)
					{
						if($Force -or $PSCmdlet.ShouldProcess($TSRemoteServer.ServerName,"Stop Process '$($p.ProcessName) ($($p.ProcessID))"))
						{
							Write-Verbose "[$FuncName] Killing process '$($p.ProcessName)' ($($p.ProcessId))"
							$p.Kill()
						}
					}
				}
			}
			catch
			{
				Throw
			}
		}
	
	
		end
		{
			try
			{
				Write-Verbose "[$funcName] Entering End block."
				Write-Verbose "[$funcName] Disconnecting from remote server '$($TSRemoteServer.ServerName)'"
				$TSRemoteServer.Close()
				$TSRemoteServer.Dispose()
			}
			catch
			{
				Throw
			}
		}
	}
	
	function Send-TSMessage
	{
	
		<#
		.SYNOPSIS
			Displays a message box in the specified session Id.
	
		.DESCRIPTION
			Use Send-TSMessage display a message box in the specified session Id.
	
		.PARAMETER ComputerName
		    	The name of the terminal server computer. The default is the local computer. Default value is the local computer (localhost).
	
		.PARAMETER Text
			The text to display in the message box.
	
		.PARAMETER SessionID
			The number of the session Id.
	
		.PARAMETER Caption
			   The caption of the message box. The default caption is 'Alert'.
	
		.EXAMPLE
			$Message = "Importnat message`n, the server is going down for maintanace in 10 minutes. Please save your work and logoff."
			Get-TSSession -State Active -ComputerName comp1 | Send-TSMessage -Message $Message
	
			Description
			-----------
			Displays a message box inside all active sessions of computer name 'comp1'.
	
		.OUTPUTS
	
		.COMPONENT
			TerminalServer
	
		.NOTES
			Author: Shay Levy
			Blog  : http://blogs.microsoft.co.il/blogs/ScriptFanatic/
	
		.LINK
			http://code.msdn.microsoft.com/PSTerminalServices
	
		.LINK
			http://code.google.com/p/cassia/
	
		.LINK
			Get-TSSession
		#>
	
	
		[CmdletBinding(DefaultParameterSetName='Session')]
	
		Param(
			[Parameter()]
			[Alias('CN','IPAddress')]
			[System.String]$ComputerName=$script:server,
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				HelpMessage='The text to display in the message box.'
			)]
			[System.String]$Text,
	
			[Parameter(
				HelpMessage='The caption of the message box.'
			)]
			[ValidateNotNullOrEmpty()]
			[System.String]$Caption='Alert',
	
			[Parameter(
				Position=0,
				ValueFromPipelineByPropertyName=$true,
				ParameterSetName='Session'
			)]
			[Alias('SessionID')]
			[ValidateRange(0,65536)]
			[System.Int32]$Id=-1,
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				ValueFromPipeline=$true,
				ParameterSetName='InputObject'
			)]
			[Cassia.Impl.TerminalServicesSession]$InputObject
		)
	
		begin
		{
			try
			{
				$FuncName = $MyInvocation.MyCommand
				Write-Verbose "[$funcName] Entering Begin block."
	
				if(!$ComputerName)
				{
					Write-Verbose "[$funcName] $ComputerName is not defined, loading global value '$script:Server'."
					$ComputerName = Get-TSGlobalServerName
				}
				else
				{
					$ComputerName = Set-TSGlobalServerName -ComputerName $ComputerName
				}
	
				Write-Verbose "[$FuncName] Attempting remote connection to '$ComputerName'"
				$TSManager = New-Object Cassia.TerminalServicesManager
				$TSRemoteServer = $TSManager.GetRemoteServer($ComputerName)
				$TSRemoteServer.Open()
	
				if(!$TSRemoteServer.IsOpen)
				{
					Throw 'Connection to remote server is not open. Use Connect-TSServer to connect first.'
				}
	
				Write-Verbose "[$FuncName] Connection is open '$ComputerName'"
				Write-Verbose "[$FuncName] Updating global Server name '$ComputerName'"
				$null = Set-TSGlobalServerName -ComputerName $ComputerName
			}
			catch
			{
				Throw
			}
		}
	
	
		process
		{
	
			Write-Verbose "[$funcName] Entering Process block."
	
			try
			{
	
				if($PSCmdlet.ParameterSetName -eq 'Session')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					if($Id -ge 0)
					{
						$session = $TSRemoteServer.GetSession($Id)
					}
				}
	
				if($PSCmdlet.ParameterSetName -eq 'InputObject')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					$session = $InputObject
				}
	
				if($session)
				{
					Write-Verbose "[$FuncName] Sending alert message to session id: '$($session.SessionId)' on '$ComputerName'"
					$session.MessageBox($Text,$Caption)
				}
			}
			catch
			{
				Throw
			}
		}
	
	
		end
		{
			try
			{
				Write-Verbose "[$funcName] Entering End block."
				Write-Verbose "[$funcName] Disconnecting from remote server '$($TSRemoteServer.ServerName)'"
				$TSRemoteServer.Close()
				$TSRemoteServer.Dispose()
			}
			catch
			{
				Throw
			}
		}
	}
	
	function Get-TSServers
	{
	
		<#
		.SYNOPSIS
			Enumerates all terminal servers in a given domain.
	
		.DESCRIPTION
			Enumerates all terminal servers in a given domain.
	
		.PARAMETER ComputerName
		    	The name of the terminal server computer. The default is the local computer. Default value is the local computer (localhost).
	
		.PARAMETER DomainName
			The name of the domain. The default is the caller domain name ($env:USERDOMAIN).
	
		.EXAMPLE
			Get-TSDomainServers
	
			Description
			-----------
			Get a list of all terminal servers of the caller default domain.
	
		.OUTPUTS
	
		.COMPONENT
			TerminalServer
	
		.NOTES
			Author: Shay Levy
			Blog  : http://blogs.microsoft.co.il/blogs/ScriptFanatic/
	
		.LINK
			http://code.msdn.microsoft.com/PSTerminalServices
	
		.LINK
			http://code.google.com/p/cassia/
	
		.LINK
			Get-TSSession
		#>
	
	
		[OutputType('System.Management.Automation.PSCustomObject')]
		[CmdletBinding()]
	
		Param(
			[Parameter(
				Position=0,
				ParameterSetName='Name'
			)]
			[System.String]$DomainName=$env:USERDOMAIN
		)
	
	
		try
		{
			$FuncName = $MyInvocation.MyCommand
			if(!$ComputerName)
			{
				Write-Verbose "[$funcName] ComputerName is not defined, loading global value '$script:Server'."
				$ComputerName = Get-TSGlobalServerName
			}
			else
			{
				$ComputerName = Set-TSGlobalServerName -ComputerName $ComputerName
			}
	
			Write-Verbose "[$funcName] Enumerating terminal servers for '$DomainName' domain."
			Write-Warning 'Depending on your environment the command may take a while to complete.'
			$TSManager = New-Object Cassia.TerminalServicesManager
			$TSManager.GetServers($DomainName)
		}
		catch
		{
			Throw
		}
	
	}
	
	function Get-TSCurrentSession
	{
	
		<#
		.SYNOPSIS
			Provides information about the session in which the current process is running.
	
		.DESCRIPTION
			Provides information about the session in which the current process is running.
	
		.EXAMPLE
			Get-TSCurrentSession
	
			Description
			-----------
			Displays the session in which the current process is running on the local computer.
	
		.OUTPUTS
			Cassia.Impl.TerminalServicesSession
	
		.COMPONENT
			TerminalServer
	
		.NOTES
			Author: Shay Levy
			Blog  : http://blogs.microsoft.co.il/blogs/ScriptFanatic/
	
		.LINK
			http://code.msdn.microsoft.com/PSTerminalServices
	
		.LINK
			http://code.google.com/p/cassia/
	
		.LINK
			Get-TSSession
		#>
	
	
		[OutputType('Cassia.Impl.TerminalServicesSession')]
		[CmdletBinding()]
	
		param(
			[Parameter()]
			[Alias('CN','IPAddress')]
			[System.String]$ComputerName=$script:server
		)
	
	
		try
		{
			$FuncName = $MyInvocation.MyCommand
	
			if(!$ComputerName)
			{
				Write-Verbose "[$funcName] ComputerName is not defined, loading global value '$script:Server'."
				$ComputerName = Get-TSGlobalServerName
			}
			else
			{
				$ComputerName = Set-TSGlobalServerName -ComputerName $ComputerName
			}
	
			Write-Verbose "[$funcName] Attempting remote connection to '$ComputerName'"
			$TSManager = New-Object Cassia.TerminalServicesManager
			$TSRemoteServer = $TSManager.GetRemoteServer($ComputerName)
			$TSRemoteServer.Open()
	
			if(!$TSRemoteServer.IsOpen)
			{
				Throw 'Connection to remote server is not open. Use Connect-TSServer to connect first.'
			}
	
			Write-Verbose "[$funcName] Connection is open '$ComputerName'"
			Write-Verbose "[$funcName] Updating global Server name '$ComputerName'"
			$null = Set-TSGlobalServerName -ComputerName $ComputerName
	
			Write-Verbose "[$funcName] Get CurrentSession from '$ComputerName'"
			$TSManager.CurrentSession
	
			Write-Verbose "[$funcName] Disconnecting from remote server '$($TSRemoteServer.ServerName)'"
			$TSRemoteServer.Close()
			$TSRemoteServer.Dispose()
		}
		catch
		{
			Throw
		}
	}
	
	function Set-TSGlobalServerName
	{
		[CmdletBinding()]
	
		Param(
			[Parameter(Mandatory=$true)]
			[ValidateNotNullOrEmpty()]
			[System.String]$ComputerName
		)
	
		if($ComputerName -eq "." -OR $ComputerName -eq $env:COMPUTERNAME)
		{
			$ComputerName='localhost'
		}
	
		$script:Server=$ComputerName
		$script:Server
	}
	
	function Get-TSGlobalServerName
	{
		$script:Server
	}#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
