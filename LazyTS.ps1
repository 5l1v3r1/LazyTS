#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 8c368515-c779-4ebb-95db-cf067966c8e3
# Source File: ..\LazyTS.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
NQIAAB+LCAAAAAAABACNkl1rgzAUhu8L/Q+Se6vS+VGIuZhdx2BftLLbEuNxZMREEh1zv35x2mIZ
jN7lPec9z3s4BO+BqU/Q/Za2lCwXjoNftfoA1v4KK99AG64kCbB3ek6dHRfwsCUJW0dJGIQui+ON
ewNF4W7CsnBZ5UfxJopYAmvsTeZpdMrI+waIj725nMHNJCbp7KECDZLBM60hRci57bgoU+Qjcmip
brtm1RgzZv0/mlEh3CfK5U7p+tiYas461S2suhp2L1RBhUUFM5STqbqmsrz7akEOp0tRrjtAZHQb
mxBcnZBRYzg9lkKcEwJExurKVi9AoxgPeL7vqF40f+eSisEw4Mkj/e7zg92lsTbs/ekvF9i7+CY/
VVdZhDUCAAA=#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2015 v4.2.81
     Generated on:       2015-03-01 8:31 PM
     Generated by:       Francois-Xavier
     Organization:       LazyWinAdmin
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2015
#>


#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
xQQAAB+LCAAAAAAABAC9lMlqwzAQQO+F/oPJ2Xip4jgBxxBSciltQ13aXsf22IhqCSM5wX9fZyEJ
LXQJ1Ogyo5Hm8ZCY5AkLvUZqb8GC0wWGazUd3AzS6yvHSR6J11yBWHCBDyAxzSyQbVbeypjE/1Ld
3ZkZgzIXHM0uP+20adYai9K7BwU1SlTWmzVWS7Ad1HVeDnTmBdvlOvNG2IZwqrCxBMJ1lk3Xt7jD
9lm/Y3cwzCs2jkZQstEQWZT4R9JnsjSFJsHzE2X4W0oexxAV0SicsCEG48k3lL1fHwzvlatSb4y3
0CRNL8TtD+kHRLDhqr6EFbAqquIqDMsoAAY/s96k6MeJExZWU5shrXmBFz3Zn+3mmrAXvYPVknSn
9g9ux3Q/VRL/fGylH3nEhp/FBAAA#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
	Param ([String]$Commandline)
	if((Call-MainForm_psf) -eq "OK")
	{	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
47t6Im8G7J9A8Zy89cpzh/8//n8bF+1Vs6wAAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$datagridviewOutput = New-Object 'System.Windows.Forms.DataGridView'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonReset = New-Object 'System.Windows.Forms.Button'
	$buttonFilter = New-Object 'System.Windows.Forms.Button'
	$textboxHighlight = New-Object 'System.Windows.Forms.TextBox'
	$buttonHighlight = New-Object 'System.Windows.Forms.Button'
	$buttonMessage = New-Object 'System.Windows.Forms.Button'
	$textboxComputerName = New-Object 'System.Windows.Forms.TextBox'
	$labelComputerName = New-Object 'System.Windows.Forms.Label'
	$buttonGetTsSession = New-Object 'System.Windows.Forms.Button'
	$buttonProcess = New-Object 'System.Windows.Forms.Button'
	$richtextboxStatus = New-Object 'System.Windows.Forms.RichTextBox'
	$statusstrip1 = New-Object 'System.Windows.Forms.StatusStrip'
	$tooltip1 = New-Object 'System.Windows.Forms.ToolTip'
	$helpprovider1 = New-Object 'System.Windows.Forms.HelpProvider'
	$contextmenustripTSSession = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$disconnectTSSessionToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$sendTSSessionToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$contextmenustripTSProcess = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$sendTSMessageToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$stopTSProcessToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$stopTSSessionToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripstatuslabel1 = New-Object 'System.Windows.Forms.ToolStripStatusLabel'
	$toolstripstatuslabel2 = New-Object 'System.Windows.Forms.ToolStripStatusLabel'
	$toolstripseparator1 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$remoteDesktopToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$powerShellRemotingToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator2 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$remoteDesktopToolStripMenuItem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$powerShellRemotingToolStripMenuItem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$remoteDesktopShadowIDToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$remoteDesktopShadowToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$remoteDesktopShadowControlToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$remoteDesktopShadowControlToolStripMenuItem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$OnLoadFormEvent={
		#Stuff to do when the Form is loading
		Set-DataGridView -DataGridView $datagridviewOutput -AlternativeRowColor -ForeColor 'black' -BackColor 'AliceBlue'
	}
	
	$buttonGetTsSession_Click={
		TRY{
			# Set the ContextMenuStrip for TsSession
			$datagridviewOutput.ContextMenuStrip = $contextmenustripTSSession
			
			# Show the progression in the Richtextbox
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Get-TSSession" -Message "Loading"
			
			# Get the Data from Get-TSSession and convert to datatable
			$output = Get-TSSession -ComputerName $textboxComputerName.Text | ForEach-Object {
				[pscustomobject][ordered]@{
					#Server = $item.server
					ComputerName = $textboxComputerName.Text
					SessionID = $_.SessionID
					State = $_.state
					UserAccount = $_.useraccount
					IPAddress	= $_.IPAddress
					ClientName = $_.ClientName
					WindowStationName = $_.WindowStationName
					#Username = $_.username
					ConnectionState = $_.ConnectionState
					ClientBuildNumber = $_.ClientBuildNumber
					ClientDisplay = $_.ClientDisplay
					ClientIPAddress = $_.ClientIPAddress
					ConnectTime = $_.ConnectTime
					CurrentTime = $_.CurrentTime
					DisconnectTime = $_.DisconnectTime
					#DomainName = $_.DomainName
					LastInputTime = $_.LastInputTime
					LoginTime = $_.LoginTime
					}#pscustomobject properties
			} #FOREACH
			
			$global:outputDT = ConvertTo-DataTable -InputObject $output
			Load-DataGridView -DataGridView $datagridviewOutput -Item $outputDT
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Get-TSSession" -Message "Loaded"
		}
		CATCH{
			Write-Warning -Message "$textboxComputerName.Text - Get-TSSession Error"
			Write-Warning -Message $Error[0].Exception.Message
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Get-TSSession" -Message "Loading Error: $($Error[0].Exception.Message) " -MessageColor 'Red'
		}#CATCH
	}
	
	$buttonProcess_Click={
		TRY{
			# Set the ContextMenuStrip for TsProcess
			$datagridviewOutput.ContextMenuStrip = $contextmenustripTSProcess
			
			# Show the progression in the Richtextbox
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Get-TSProcess" -Message "Loading"
			
			# Get the TSProcess and output a PSObject
			$output = Get-TSProcess -ComputerName $textboxComputerName.Text | ForEach-Object {
				[pscustomobject][ordered]@{
					#Server = $Item.Server
					ComputerName = $textboxComputerName.Text
					SessionId = $_.SessionId
					ProcessName = $_.ProcessName
					ProcessId = $_.ProcessId
					SecurityIdentifier = $_.SecurityIdentifier
					UnderlyingProcess = $_.UnderlyingProcess
				}#pscustomobject properties
			}#FOREACH-OBJECT
			
			$global:outputDT = ConvertTo-DataTable -InputObject $output
			Load-DataGridView -DataGridView $datagridviewOutput -Item $outputDT
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Get-TSProcess" -Message "Loaded"
		}#TRY
		CATCH{
			Write-Warning -Message "$textboxComputerName.Text - Get-TSProcess Error"
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Get-TSProcess" -Message "Loading Error" -MessageColor 'Red'
		}
	}
	
	$sendTSSessionToolStripMenuItem_Click={
		TRY{
			# ONE ROW SELECTED
			IF($datagridviewOutput.SelectedRows.Count -eq 1){
				# Input Message box to send
				[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
				$Message = [Microsoft.VisualBasic.Interaction]::InputBox("Message", "Send-TSMessage", "IMPORTANT: The Server is going down for maintenance in 10 minutes. Please save your work and logoff.")
				IF ($Message)
				{
					$Message = "$Message - Sent by $env:userdomain\$env:username"
					
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Sending Message to session $($datagridviewOutput.currentrow.Cells[1].value) on $($textboxComputerName.text)"
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "MESSAGE: $message"
					
					# Sending the message
					Send-TSMessage -ComputerName $textboxComputerName.Text -Text $message -Id $datagridviewOutput.currentrow.Cells[1].value -caption "Administrator Message" -ErrorAction 'Stop'
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Message Sent!"
				}
			}#IF($datagridviewOutput.SelectedRows.Count -eq 1)
			
			# MULTIPLE ROWS SELECTED
			IF ($datagridviewOutput.SelectedRows.Count -gt 1)
			{
				# Get the Values for the rows Selected
				$values = @()
				FOREACH ($SelectedRow in $datagridviewOutput.SelectedRows)
				{
					# Store the session ID in $values
					$values += $SelectedRow.Cells[1].Value
				}#FOREACH
				
				IF([System.Windows.Forms.MessageBox]::Show("You selected multiple sessions ($(($values|select-object -unique).count)), do you want to continue ?", "Question",[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes")
				{
					# Input Message box to send
					[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
					$Message = [Microsoft.VisualBasic.Interaction]::InputBox("Message", "Send-TSMessage", "IMPORTANT: The Server is going down for maintenance in 10 minutes. Please save your work and logoff.")
					IF ($Message)
					{
						$Message = "$Message - Sent by $env:userdomain\$env:username"
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "MESSAGE: $message"
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Sessions to receive the Message: $(($values|Select-Object -Unique).Count) sessions"
						
						# Send Message to each session
						# if the same session was selected twice, only one command will be sent
						FOREACH ($item in ($values | Select-Object -Unique))
						{
							IF ($item -eq 0) { Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Sending Message to session 0 might failed..." }
							Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Sending Message to session $item"
							Send-TSMessage -ComputerName $textboxComputerName.Text -Text $Message -Id $item -caption "Administrator Message"
							Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Sent Message to session $item"
						}#FOREACH
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Message Sent!"
					}#IF $MESSAGE
				}#IF Message Box "You selected multiple rows"
			}#IF($datagridviewOutput.SelectedRows.Count -gt 1)
		}#TRY
		CATCH{
			Write-Warning -Message "$textboxComputerName.Text - Send-TSMessage Error"
			Write-Warning -Message "$($Error[0].Exception)"
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Sending Error" -MessageColor 'Red'
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Send-TSMessage" -Message "Last Error ($error[0])" -MessageColor 'Red'
		}
	}
	
	$disconnectTSSessionToolStripMenuItem_Click={
		TRY{
			# ONE ROW SELECTED
			IF($datagridviewOutput.SelectedRows.Count -eq 1){
				IF([System.Windows.Forms.MessageBox]::Show("Do you want to Disconnect the SessionID $($datagridviewOutput.currentrow.Cells[1].value) on $($textboxComputerName.text)?", "Question",[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Disconnect-TSSession" -Message "Disconnecting session $($datagridviewOutput.currentrow.Cells[1].value) on $($textboxComputerName.text)"
					Disconnect-TSSession -ComputerName $textboxComputerName.Text -Id $datagridviewOutput.currentrow.Cells[1].value -Force
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Disconnect-TSSession" -Message "Session $($datagridviewOutput.currentrow.Cells[1].value) on $($textboxComputerName.text) Disconnected!"
				}# Message Box
			}# IF($datagridviewOutput.SelectedRows.Count -eq 1)
			
			# MULTIPLE ROWS SELECTED
			IF ($datagridviewOutput.SelectedRows.Count -gt 1)
			{
				# Get the Values for the Rows Selected
				$values = @()
				FOREACH ($SelectedRow in $datagridviewOutput.SelectedRows)
				{
					# Store the session ID in $values
					$values += $SelectedRow.Cells[1].Value
				}#FOREACH
				
				#SingleValues
				$Singlevalues = $values | Select-Object -Unique
				
				IF([System.Windows.Forms.MessageBox]::Show("You selected multiple sessions ($($Singlevalues.count)) to disconnect, do you want to continue ?", "Question",[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Disconnect-TSSession" -Message "Sessions to Disconnect: $(($values | Select-Object -Unique).count)"
					
					# Disconnect each sessions selected
					# if the same session was selected twice, only one command will be sent
					FOREACH ($item in ($values | Select-Object -Unique)){
						IF ($item -eq 0){Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Disconnect-TSSession" -Message "Disconnecting the session 0 might failed..."}
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Disconnect-TSSession" -Message "Disconnecting session $item"
						Disconnect-TSSession -ComputerName $textboxComputerName.Text -Id $item
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Disconnect-TSSession" -Message "Session $item on $($textboxComputerName.text) should be Disconnected!"
					}#FOREACH
				}#IF Message Box "You selected multiple rows"
			}#IF($datagridviewOutput.SelectedRows.Count -gt 1)
		}#TRY
		CATCH{
			Write-Warning -Message "$textboxComputerName.Text - Disconnect-TSSession Error"
			Write-Warning -Message "$Error[0].Exception"
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Disconnect-TSSession" -Message "Disconnecting Session Failed!" -MessageColor 'red'
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Disconnect-TSSession" -Message "Last Error ($error[0])" -MessageColor 'Red'
		}#CATCH
	}
	
	$stopTSProcessToolStripMenuItem_Click={
		TRY{
			# ONE ROW SELECTED
			IF($datagridviewOutput.SelectedRows.Count -eq 1){
				IF([System.Windows.Forms.MessageBox]::Show("Do you want to stop the Process $($datagridviewOutput.currentrow.Cells[2].value) ID $($datagridviewOutput.currentrow.Cells[3].value) on $($textboxComputerName.text)?", "Question",[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes")
				{
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSProcess" -Message "Stopping - Process $($datagridviewOutput.currentrow.Cells[2].value) ID $($datagridviewOutput.currentrow.Cells[3].value) on $($textboxComputerName.text)"
					Stop-TSProcess -ComputerName $textboxComputerName.Text -Id $($datagridviewOutput.currentrow.Cells[3].value) -Force
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSProcess" -Message "Stopped - Process $($datagridviewOutput.currentrow.Cells[2].value) ID $($datagridviewOutput.currentrow.Cells[3].value) on $($textboxComputerName.text)"
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSProcess" -Message "Reloading Process List..."
					
					# Refresh the list of process
					$buttonProcess_Click.invoke()
				}# Message box "Do you want to stop the Process"
			}#IF($datagridviewOutput.SelectedRows.Count -eq 1)
			
			# MULTIPLE ROWS SELECTED
			IF ($datagridviewOutput.SelectedRows.Count -gt 1)
			{
				IF([System.Windows.Forms.MessageBox]::Show("You selected multiple Processes ($($datagridviewOutput.SelectedRows.Count)) to Stop, do you want to continue ?", "Question",[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes")
				{
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSProcess" -Message "Processes to Stop: $($datagridviewOutput.SelectedRows.Count)"
					
					# Get the Values for the Rows Selected and kill each process
					FOREACH ($SelectedRow in $datagridviewOutput.SelectedRows) {
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSProcess" -Message "Stopping - Process $($SelectedRow.Cells[2].Value) ID $($SelectedRow.Cells[3].Value) on $($textboxComputerName.text)"
						Stop-TSProcess -ComputerName $textboxComputerName.Text -Id $($SelectedRow.Cells[3].Value) -Force
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSProcess" -Message "Stopped - Process $($SelectedRow.Cells[2].Value) ID $($SelectedRow.Cells[3].Value)  on $($textboxComputerName.text)"
					}#FOREACH
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSProcess" -Message "Done. Reloading Process List..."
					
					# Refresh the list of process
					$buttonProcess_Click.invoke()
				}#IF Message Box "You selected multiple rows"
			}#IF($datagridviewOutput.SelectedRows.Count -gt 1)
		}#TRY
		CATCH{
			Write-Warning -Message "$textboxComputerName.Text - Disconnect-TSSession Error"
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSProcess" -Message "Stopping Process $($datagridviewOutput.currentrow.Cells[2].value) ID $($datagridviewOutput.currentrow.Cells[3].value) on $($textboxComputerName.text) Failed!" -MessageColor 'red'
		}#CATCH
	}
	
	$buttonExit_Click = {
		# Close the GUI
		$MainForm.Close()
	}
	
	$datagridviewOutput_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
		IF($datagridviewOutput.DataSource -is [System.Data.DataTable])
		{
			#$column = $datagridviewOutput.Columns[$_.Columns]
			$column = $datagridviewOutput.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			IF($column.HeaderCell.SortGlyphDirection -eq 'Descending'){
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}#IF($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			$datagridviewOutput.Sort($datagridviewOutput.Columns[$_.ColumnIndex], $direction)
			
		}#IF($datagridviewOutput.DataSource -is [System.Data.DataTable])
	}
	
	$toolstripstatuslabel1_Click = {
		# Open LazyWinAdmin Blog
		Start-Process -FilePath "http://www.lazywinadmin.com"
	}
	
	$buttonMessage_Click={
		$sendTSSessionToolStripMenuItem_Click.Invoke()
	}
	
	$stopTSSessionToolStripMenuItem_Click={
		TRY
		{
			# ONE ROW SELECTED
			IF ($datagridviewOutput.SelectedRows.Count -eq 1)
			{
				IF ([System.Windows.Forms.MessageBox]::Show("Do you want to Close the SessionID $($datagridviewOutput.currentrow.Cells[1].value) on $($textboxComputerName.text)?", "Question", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSSession" -Message "Closing session $($datagridviewOutput.currentrow.Cells[1].value) on $($textboxComputerName.text)"
					Stop-TSSession -ComputerName $textboxComputerName.Text -Id $datagridviewOutput.currentrow.Cells[1].value -Force
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSSession" -Message "Session $($datagridviewOutput.currentrow.Cells[1].value) on $($textboxComputerName.text) Closed!"
				}# Message Box
			}# IF($datagridviewOutput.SelectedRows.Count -eq 1)
			
			# MULTIPLE ROWS SELECTED
			IF ($datagridviewOutput.SelectedRows.Count -gt 1)
			{
				# Get the Values for the Rows Selected
				$values = @()
				FOREACH ($SelectedRow in $datagridviewOutput.SelectedRows)
				{
					# Store the session ID in $values
					$values += $SelectedRow.Cells[1].Value
				}#FOREACH
				
				$SingleValues = $values | Select-Object -Unique
				
				IF ([System.Windows.Forms.MessageBox]::Show("You selected multiple sessions ($($SingleValues.count)) to Close, do you want to continue ?", "Question", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSSession" -Message "Sessions to Close: $(($values | Select-Object -Unique).count)"
					
					# Disconnect each sessions selected
					# if the same session was selected twice, only one command will be sent
					FOREACH ($item in ($values | Select-Object -Unique))
					{
						IF ($item -eq 0) { Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSSession" -Message "Closing the session 0 might failed..." }
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSSession" -Message "Closing session $item"
						Stop-TSSession -ComputerName $textboxComputerName.Text -Id $item -Force
						Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSSession" -Message "Session $item on $($textboxComputerName.text) should be Closed!"
					}#FOREACH
				}#IF Message Box "You selected multiple rows"
			}#IF($datagridviewOutput.SelectedRows.Count -gt 1)
			
			# Refresh the list of Session(s)
			$buttonGetTsSession_Click.invoke()
		}#TRY
		CATCH
		{
			Write-Warning -Message "$textboxComputerName.Text - Stop-TSSession Error"
			Write-Warning -Message "$Error[0].Exception"
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSSession" -Message "Closing Session Failed!" -MessageColor 'red'
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Stop-TSSession" -Message "Last Error ($error[0])" -MessageColor 'Red'
		}#CATCH
	}
	
	$remoteDesktopToolStripMenuItem_Click={
		Start-Process -FilePath 'mstsc' -ArgumentList "/v:$($textboxComputerName.Text):3389 /admin"
	}
	
	$powerShellRemotingToolStripMenuItem_Click={
		Start-Process powershell.exe -ArgumentList "-noexit -command Enter-PSSession -ComputerName $($textboxComputerName.Text)"
	}
	
	$buttonHighlight_Click = {
		if ($textboxHighlight.Text)
		{
			Clear-DataGridViewSelection -DataGridView $datagridviewOutput
			Reset-DataGridViewFormat -DataGridView $datagridviewOutput
			Set-DataGridView -DataGridView $datagridviewOutput -AlternativeRowColor -BackColor 'AliceBlue' -ForeColor 'Black'
			Find-DataGridViewValue -DataGridView $datagridviewOutput -RowBackColor 'Yellow' -Value $textboxHighlight.Text
		}
	}
	
	$buttonReset_Click={
		Reset-DataGridViewFormat -DataGridView $datagridviewOutput
		Reset-TextBox -TextBox $textboxHighlight
	}
	
	$buttonFilter_Click={
		Set-DataGridViewFilter -DataGridView $datagridviewOutput -AllColumns -DataTable $outputDT -Filter $textboxHighlight.Text
	}
	
	$remoteDesktopShadowIDToolStripMenuItem_Click = {
		TRY
		{
			# ONE ROW SELECTED
			IF ($datagridviewOutput.SelectedRows.Count -eq 1)
			{
				IF ([System.Windows.Forms.MessageBox]::Show("Do you want to connect the SessionID $($datagridviewOutput.currentrow.Cells[1].value) on $($textboxComputerName.text)?", "Question", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					$SessionID = $($datagridviewOutput.currentrow.Cells[1].value)
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Remote Desktop" -Message "Opening Shadow (view) session $SessionID on $($textboxComputerName.text)"
					Start-Process -FilePath 'mstsc' -ArgumentList "/v:$($textboxComputerName.Text):3389 /shadow:$SessionID"
				}# Message Box
			}#IF
			IF ($datagridviewOutput.SelectedRows.Count -gt 1)
			{
				Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Remote Desktop" -Message "Please select only one row" -MessageColor 'red'
			}
		}
		CATCH
		{
			Write-Warning -Message "$textboxComputerName.Text - Remote Desktop (Shadow/View) Error"
			Write-Warning -Message "$Error[0].Exception"
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Remote Desktop" -Message "Error while opening session" -MessageColor 'red'
		}
	}
	$remoteDesktopShadowControlToolStripMenuItem_Click={
		TRY
		{
			# ONE ROW SELECTED
			IF ($datagridviewOutput.SelectedRows.Count -eq 1)
			{
				IF ([System.Windows.Forms.MessageBox]::Show("Do you want to connect the SessionID $($datagridviewOutput.currentrow.Cells[1].value) on $($textboxComputerName.text)?", "Question", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
				{
					$SessionID = $($datagridviewOutput.currentrow.Cells[1].value)
					Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Remote Desktop" -Message "Opening Shadow (control) session $SessionID on $($textboxComputerName.text)"
					Start-Process -FilePath 'mstsc' -ArgumentList "/v:$($textboxComputerName.Text):3389 /shadow:$SessionID /control"
				}# Message Box
			}#IF
			IF ($datagridviewOutput.SelectedRows.Count -gt 1)
			{
				Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Remote Desktop" -Message "Please select only one row" -MessageColor 'red'
			}
			IF ($datagridviewOutput.SelectedRows.Count -eq 0)
			{
				New-MessageBox -Buttons 'OK' -Icon 'Information' -Message "Please select a row" -Title "No session specified"
			}
		}
		CATCH
		{
			Write-Warning -Message "$textboxComputerName.Text - Remote Desktop (Shadow/Control) Error"
			Write-Warning -Message "$Error[0].Exception"
			Append-RichtextboxStatus -ComputerName $textboxComputerName.Text -Source "Remote Desktop" -Message "Error while opening session" -MessageColor 'red'
		}
	}
	
	
	foreach ($i in $datagridviewOutput.Columns)
	{
		$i.GetType
		
	}
	$textboxHighlight_TextChanged = {
		if ($textboxHighlight.Text -ne "")
		{
			Enable-Button -Button $buttonHighlight,$buttonReset
			Set-TextBox -TextBox $textboxHighlight -BackColor 'Yellow'
		}
		else
		{
			Disable-Button -Button $buttonHighlight, $buttonReset
			Set-TextBox -TextBox $textboxHighlight -BackColor 'White'
		}
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_textboxHighlight = $textboxHighlight.Text
		$script:MainForm_textboxComputerName = $textboxComputerName.Text
		$script:MainForm_richtextboxStatus = $richtextboxStatus.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonReset.remove_Click($buttonReset_Click)
			$buttonFilter.remove_Click($buttonFilter_Click)
			$textboxHighlight.remove_TextChanged($textboxHighlight_TextChanged)
			$buttonHighlight.remove_Click($buttonHighlight_Click)
			$buttonMessage.remove_Click($buttonMessage_Click)
			$buttonGetTsSession.remove_Click($buttonGetTsSession_Click)
			$buttonProcess.remove_Click($buttonProcess_Click)
			$MainForm.remove_Load($OnLoadFormEvent)
			$disconnectTSSessionToolStripMenuItem.remove_Click($disconnectTSSessionToolStripMenuItem_Click)
			$sendTSSessionToolStripMenuItem.remove_Click($sendTSSessionToolStripMenuItem_Click)
			$sendTSMessageToolStripMenuItem.remove_Click($sendTSSessionToolStripMenuItem_Click)
			$stopTSProcessToolStripMenuItem.remove_Click($stopTSProcessToolStripMenuItem_Click)
			$stopTSSessionToolStripMenuItem.remove_Click($stopTSSessionToolStripMenuItem_Click)
			$toolstripstatuslabel1.remove_Click($toolstripstatuslabel1_Click)
			$remoteDesktopToolStripMenuItem.remove_Click($remoteDesktopToolStripMenuItem_Click)
			$powerShellRemotingToolStripMenuItem.remove_Click($powerShellRemotingToolStripMenuItem_Click)
			$remoteDesktopToolStripMenuItem1.remove_Click($remoteDesktopToolStripMenuItem_Click)
			$powerShellRemotingToolStripMenuItem1.remove_Click($powerShellRemotingToolStripMenuItem_Click)
			$remoteDesktopShadowIDToolStripMenuItem.remove_Click($remoteDesktopShadowIDToolStripMenuItem_Click)
			$remoteDesktopShadowToolStripMenuItem.remove_Click($remoteDesktopShadowIDToolStripMenuItem_Click)
			$remoteDesktopShadowControlToolStripMenuItem.remove_Click($remoteDesktopShadowControlToolStripMenuItem_Click)
			$remoteDesktopShadowControlToolStripMenuItem1.remove_Click($remoteDesktopShadowControlToolStripMenuItem_Click)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$groupbox1.SuspendLayout()
	$statusstrip1.SuspendLayout()
	$contextmenustripTSSession.SuspendLayout()
	$contextmenustripTSProcess.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($datagridviewOutput)
	$MainForm.Controls.Add($groupbox1)
	$MainForm.Controls.Add($richtextboxStatus)
	$MainForm.Controls.Add($statusstrip1)
	$MainForm.ClientSize = '723, 340'
	#region Binary Data
	$MainForm.Icon = [System.Convert]::FromBase64String('
AAABAAQAGBgAAAEAIACICQAARgAAACAgAAABACAAqBAAAM4JAAAQEAAAAQAgAGgEAAB2GgAAFhYA
AAEAIAAQCAAA3h4AACgAAAAYAAAAMAAAAAEAIAAAAAAAAAkAANcNAADXDQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAXAAAAKwAAACsAAAArAAAAFwAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAVVVVAVVVVQFVVVUGVVVVIFVVVW1VVVW4VVVV3VVVVfNVVVX9
VVVV/8DAwP+cnJz/hoaG/1VVVf9VVVX/VVVV9VVVVdVVVVWWVVVVVVVVVSxVVVUcVVVVHAAAAAAA
AAAAyMjIAsjIyATIyMgHyMjIHcjIyGDIyMiuyMjI28jIyPOgoKD9gICA/+Li4v/IyMj/oKCg/2Zm
Zv+AgID/oKCg9cjIyNfIyMiXyMjIVcjIyCzIyMgdyMjIHQAAAAAAAAAAVVVVC1VVVQ9VVVUZVVVV
M1VVVW9VVVWzVVVV4FVVVfRVVVX9VVVV/+Li4v/i4uL/x8fH/1VVVf9VVVX/VVVV+lVVVeFVVVWx
VVVVcFVVVUBVVVUrVVVVKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAzAAAAXFNWVf+goKD/U1ZV/wAAAFwAAAAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEpOTP/IyMj/Sk5M
/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAg4CAZoOAgP+DgID/
g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/g4CA/2ZnZv+lo6P/Zmdm/4OAgP+DgID/g4CA/4OAgP+D
gID/g4CA/4OAgP+DgID/g4CAZgAAAAAAAAAAg4CA/8vJyf/6+Pj/+vj4//r4+P/6+Pj/+vj4//r4
+P/6+Pj/+vj4/+Tj4//6+Pj/5OPj//r4+P/6+Pj/+vj4//r4+P/6+Pj/+vj4//r4+P/Lycn/g4CA
/wAAAAAAAAAAg4CA//n4+P/s6un/7Ono/+zp6P/s6ej/7Onp/+zp6f/s6en/7Onp/+zp6f/s6en/
7Onp/+zp6f/s6en/7Onp/+zp6f/s6en/6+jm/+zq6f/5+Pj/g4CA/wAAAAAAAAAAg4CA//n4+P+H
SiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og/4dK
IP+HSiD/h0og/4dKIP/5+Pj/g4CA/wAAAAAAAAAAg4CA//r5+f+HSiD/qHFG/6x3S/+yfFD/toFW
/7uHW//AjGD/xZNm/8mYa//NnXD/zJtu/8eWaf/DkWT/vope/7mFWf+0gFT/sHpP/4dKIP/5+Pj/
g4CA/wAAAAAAAAAAg4CA//r5+f+JTiX/uYxp/7yQbv+/lHH/7vDw/+zu7v/s7u7/7O7u/+zu7v/J
mWz/yZdq/8WUZ//CjmP/vYpe/7mEWP+0f1P/r3pO/4dKIP/5+Pj/g4CA/wAAAAAAAAAAg4CA//r5
+f+JTiX/uY1r/7ySb//AlnP/8PHx//Dx8f/v8PD/7e/v/+zu7v/Fk2b/xZJm/8KQZP++i1//u4db
/7aDV/+yfVL/rnhM/4dKIP/5+Pj/g4CA/wAAAAAAAAAAg4CA//r5+f+JTiX/uY9u/72Tcf/AlnX/
8PHx//Dx8f/w8fH/8PHx/+/x8f/Fl27/wI1g/+zu7v/s7u7/7O7u/7WAU/+we0//rXZK/4dKIP/6
+fn/g4CA/wAAAAAAAAAAg4CA//r5+f+JTiX/uo9v/72Tcv+/l3b/pHZX/6R2V/+kdlf/pHZX/6R2
V//LpYT/y6KB/+7v7//s7u7/7O7u/7J8Uf+teE3/qnNI/4dKIP/6+fn/g4CA/wAAAAAAAAAAg4CA
//r5+f+JTiX/upFx/72UdP+/lnf/wpp7/8Scff/Gn3//yKGB/8ijg//Jo4P/yaSD//Hy8v/w8vL/
7vDw/7J9U/+teU7/qHJH/4dKIP/6+fn/g4CA/wAAAAAAAAAAg4CA//r5+f+JTiX/uZFz/7yUdf+/
lnj/wZl6/8Ocff/Fn3//xp+A/8eggv/IooL/yKKC/6l9X/+pfV//qX1f/8KbfP/AmXr/vZR1/4dK
IP/6+fn/g4CA/wAAAAAAAAAAg4CA//r5+f+JTiX/uZFz/7uUdv++l3j/wJl7/8Kbff/DnX//xZ6A
/8Wggf/FoIL/xaCB/8Wfgf/Enn//w5x+/8CafP+/mHr/vJN2/4dKIP/6+fn/g4CA/wAAAAAAAAAA
g4CA//r5+f+JTST/8vPz//Lz8//y8/P/8vPz//Lz8//y8/P/8vPz//Lz8//y8/P/8vPz//Lz8//y
8/P/8vPz//Lz8//y8/P/8fPz/4dKIP/6+fn/g4CA/wAAAAAAAAAAg4CA//v5+f+HSiD/h0og/4dK
IP+HSiD/h0og/4dLIf+HSyH/h0sh/4hMIv+ITCL/iEwi/4hMI/+ITCP/iEwj/4lNJP+JTST/iU0k
/4dKIP/7+fn/g4CA/wAAAAAAAAAAg4CA//X09Pv7+fn/+/n5//v5+f/6+Pj/+vj4//r4+P/6+Pj/
+vj4//r4+P/6+Pj/+vj4//r4+P/6+Pj/+vj4//r4+P/6+Pj/+vj4//r5+f/29PT8g4CA/wAAAAAA
AAAAg4CAo4OAgP+DgID/g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/g4CA/4OA
gP+DgID/g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/g4CAwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAD///8A/8H/AIAAAQCAAAEAgAABAP+A/wD/4/8AgAABAIAAAQCA
AAEAgAABAIAAAQCAAAEAgAABAIAAAQCAAAEAgAABAIAAAQCAAAEAgAABAIAAAQCAAAEAgAABAP//
/wAoAAAAIAAAAEAAAAABACAAAAAAAAAQAAASCwAAEgsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBACEBA
QBBLS0sRS0tLEUtLSxFLS0sRRkZGRUdHR+5FRUX3RUVF90VFRfdFRUX3RUVF90hISMBLS0sRS0tL
EUtLSxFLS0sRS0tLEUlJSQ5VVVUGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAI6Ojgl0dHRsdHR0rXV1dchycnLfcnJy9nJycvZYWFj7V1dX/2hoaP9oaGj/aGho/2hoaP9o
aGj/R0dH/2xsbPdycnL2cnJy9nJycuF1dXXIfHx8pYGBgV0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAv7+/DJaWlnmcnJy6mpqa0JaWluCSkpLykpKS8mdnZ/mFhYX/tra2
/8PDw//Dw8P/w8PD/729vf9NTU3+iYmJ85KSkvKSkpLylpaW4pqamtClpaW1oqKibv///wEAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBACEBAQBBLS0sRS0tLEUtLSxFL
S0sRRUVFSkRERPZDQ0P/dHR0/3p6ev9RUVH5Q0ND/0ZGRstHR0cSS0tLEUtLSxFLS0sRS0tLEUlJ
SQ5VVVUGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEVFRZxwcHD/dXV1/1NTU+9ERERaAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACLkpCKhouJ+YWKiP+F
ioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WK
iP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/houJ+4qRj5IAAAAAiIiI
D4iNi/f29/f/////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////2
9vb/iI2L+Y6OjgmIiIgejJGP8//////VzMP/1cvC/9XKwf/VysH/1crB/9TKwf/UysH/1MrB/9TJ
wP/UycD/08nA/9PJwP/TycD/08nA/9PJwP/SycD/0snA/9LJwP/SycD/0si//9HIv//RyL//0ci/
/9HIv//RyL//0si///////+IjYv5iIiID4iIiB6MkY/z/////4dKIP+TWjP/k1oz/5NbNP+UWzT/
lFw1/5RcNf+VXTb/lV02/5VeN/+WXjf/ll43/5ZeN/+WXjf/ll43/5ZeN/+VXTb/lV02/5VdNf+U
XDX/lFw0/5RbNP+TWzP/k1oz/5NaMv+HSiD//////4iNi/mIiIgPiIiIHoyRj/P/////h0og/690
RP+yeEj/tXxM/7d/UP+6g1T/vYZY/7+KXP/CjmD/xZFj/8eVZ//KmGv/zJtt/8ybbv/KmGv/x5Vn
/8WSZP/CjmD/wIpc/72HWP+6g1T/t39Q/7V8TP+yeEn/r3VF/45ULP//////iI2L+YiIiA+IiIge
jJGP8/////+HSiD/r3RE/7J4SP+1fEz/t39Q/7qDVP+9h1j/wIpc/8KOYP/FkWP/x5Vn/8qYa//M
m27/zJxu/8qZa//IlWj/xZJk/8KOYP/Ai1z/vYdY/7qDVP+4gFH/tXxN/7J4Sf+vdUX/jlQs////
//+IjYv5iIiID4iIiB6MkY/z/////4dKIP+wdUX/snhJ/7R8TP+3f1D/uYJT/7yFV/++iVr/wYxe
/+zu7v/s7u7/7O7u/+zu7v/s7u7/7O7u/8WSZP/Dj2H/wYxe/7+JWv+8hlf/uoJT/7d/T/+0e0v/
snhI/690RP+OVCz//////4iNi/mIiIgPiIiIHoyRj/P/////h0og/7N7Tv+1flL/uIJV/7qFWf+8
iFz/vold/76KXf+/i13/7O7u/+zu7v/s7u7/7O7u/+zu7v/s7u7/wo5f/8CLXf++iVr/vIZX/7qD
VP+4gFH/tX1N/7N5Sv+wdkb/rnJC/45ULP//////iI2L+YiIiA+IiIgejJGP8/////+HSiD/toFW
/7iFW/+7h13/vYph/76MY//Aj2b/wpJp/8STa//u8PD/7e/v/+zu7v/s7u7/7O7u/+zu7v++iFr/
vYdY/7uEVv+6glP/t39Q/7V9Tf+zekr/sXZH/65zQ/+scED/jlQr//////+IjYv5iIiID4iIiB6M
kY/z/////4dKIP/v8fH/7/Hx/+/x8f/v8fH/wJBq/8KTbP/DlG7/xJZw/+/x8f/v8fH/7/Hx/+7w
8P/t7+//7O7u/7qDVP+5glP/7O7u/+zu7v/s7u7/7O7u/+zu7v+uc0P/rHBA/6ptPf+OVCv/////
/4iNi/mIiIgPiIiIHoyRj/P/////h0og//Dy8v/a4N3/2uDd//Dy8v/ClG//w5Zy/8SXc//FmXX/
8PLy//Dy8v/w8vL/8PLy//Dy8v/v8fH/u4VZ/7V8Tf/s7u7/7O7u/+zu7v/s7u7/7O7u/6xvP/+q
bTz/p2o5/45TK///////iI2L+YiIiA+IiIgejJGP8/////+HSiD/8fPz//Hz8//x8/P/8fPz/8SZ
dv/Emnj/xpt5/8edev/x8/P/8fPz//Hz8//x8/P/8fPz//Hz8//Hnnz/xJdz/+7w8P/s7u7/7O7u
/+zu7v/s7u7/qGs7/6dpOP+lZjX/jVMr//////+IjYv5iIiID4iIiB6MkY/z/////4dKIP/y9PT/
4OXi/+Dl4v/z9PT/xp5+/8eff//IoIH/yaGB/7CIbf+wiG3/sIht/7CIbf+wiG3/sIht/8mjg//J
ooP/8/T0//L09P/w8vL/7/Dw/+3v7/+lZzb/pGU0/6RlNP+NUyv//////4iNi/mIiIgPiIiIHoyR
j/P/////h0og//P09P/09fX/9PX1//T19f/Io4X/yqSG/8qliP/Lpoj/y6aJ/8unif/Lp4r/y6eK
/8univ/Lp4r/y6eJ/8umif+3knn/t5J5/7eSef+3knn/t5J5/8aef//BlXT/u4xo/41TK///////
iI2L+YiIiA+IiIgejJGP8/////+HSiD/9PX1/+Xp5//l6ef/9fb2/82qkP/NqpD/zaqQ/82qkP/N
qpD/zquQ/86rkP/OrJH/zqyR/86rkP/Oq5D/zaqQ/82qkP/NqpD/zaqQ/82qkP/NqpD/zaqQ/82q
kP/NqpD/jVMr//////+IjYv5iIiID4iIiB6MkY/z/////4dKIP/19vb/9vf3//b39//29/f/0rOb
/9Kzm//Ss5v/0rOb/9Kzm//Ss5v/0rOb/9Kzm//Ss5v/0rOb/9Kzm//Ss5v/0rOb/9Kzm//Ss5v/
0rOb/9Kzm//Ss5v/0rOb/9Kzm/+NUyv//////4iNi/mIiIgPiIiIHoyRj/P/////h0og//b39//q
7ez/6u3s//f4+P/Xu6b/17um/9e7pv/Xu6b/17um/9e7pv/Xu6b/17um/9e7pv/Xu6b/17um/9e7
pv/Xu6b/17um/9e7pv/Xu6b/17um/9e7pv/Xu6b/17um/45TK///////iI2L+YiIiA+IiIgejJGP
8/////+HSiD/9fTz//b19P/29fT/9vX0//b19P/29fT/9vX0//b19P/29fT/9vX0//b19P/29fT/
9vX0//b19P/29fT/9vX0//b19P/29fT/9vX0//b19P/29fT/9vX0//b19P/08vD/jlQs//////+I
jYv5iIiID4CSgA6Jjoz4/Pz8/6d6W/+HSiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og/4dK
IP+HSiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og
/4dKIP+meFn/+fj4/4iNi/qAgIAGAAAAAIuSj8DHysn8/Pz8////////////////////////////
////////////////////////////////////////////////////////////////////////////
//////////////////////////z8/P/JzMz8jZKQvAAAAAAAAAAAgIuLFouQjr2HjIr6hYqI/4WK
iP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/hYqI
/4WKiP+Fioj/hYqI/4WKiP+Fioj/hYqI/4WKiP+Fioj/iI2L+IuPjsCFhYUXAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////wAAB/4AAAf+AAA
D/wAAB///B//gAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAAB////////////////KAAAABAAAAAg
AAAAAQAgAAAAAAAABAAA1w0AANcNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AFwAAACsAAAArAAAAKwAAABcAAAAAAAAAAAAAAAAAAAAAAAAAABVVVV2VVVVnFVVVclVVVXrVVVV
/FVVVf9VVVX/wMDA/5ycnP+Ghob/VVVV/1VVVf9VVVX+VVVV91VVVd5VVVWtyMjIdMjIyJvIyMjG
yMjI6sjIyPugoKD/gICA/+Li4v/IyMj/oKCg/2ZmZv+AgID/oKCg/sjIyPbIyMjYyMjIoVVVVZBV
VVWxVVVV1VVVVfBVVVX9VVVV/1VVVf/i4uL+4uLi/sfHx/5VVVX/VVVV/1VVVf5VVVX4VVVV5FVV
VbmDgID/g4CA/4OAgP+DgID/g4CA/2lmZv9VU1P/WFhY/52dnf9YWFj/VlRU/2lmZv+DgID/g4CA
/4OAgP+DgID/g4CA/+zu7v/s7u7/7O7u/+zu7v/s7u7/7O7u/52env/X2Nj/oaKi/+zu7v/s7u7/
7O7u/+zu7v/s7u7/g4CA/4OAgP/s7u7/0tPT/9LT0//S09P/0tPT/9LT0//S09P/0tPT/9LT0//S
09P/0tPT/9LT0//S09P/7O7u/4OAgP+DgID/7O7u/4VkRP+FZET/hWRE/4VkRP+FZET/hWRE/4Vk
RP+FZET/hWRE/4VkRP+FZET/hWRE/+zu7v+DgID/g4CA/+zu7v+FZET/s41n/7CJYv+wiWH/sIlh
/7CJYf+wiWH/sotk/7WPav+1j2r/tY9q/4VkRP/s7u7/g4CA/4OAgP/s7u7/hWRE/7eTbv+zjWf/
7O7u/+zu7v/s7u7/roZd/+zu7v/s7u7/roZd/66GXf+FZET/7O7u/4OAgP+DgID/7O7u/4VkRP/B
ooT/waKE/+zu7v/s7u7/7O7u/7WRbP+kZTT/pGU0/6qAVv+ofVL/hWRE/+zu7v+DgID/g4CA/+zu
7v+FZET/yrCW/8qwlv+kZTT/pGU0/6RlNP/KsJb/yrCW/8WpjP+5lnT/sIli/4VkRP/s7u7/g4CA
/4OAgP/s7u7/hWRE/9S+qf/Uvqn/1L6p/9S+qf/Uvqn/1L6p/9S+qf/Uvqn/1L6p/9S+qf+FZET/
7O7u/4OAgP+DgID/7O7u/4VkRP+FZET/hWRE/4VkRP+FZET/hWRE/4VkRP+FZET/hWRE/4VkRP+F
ZET/hWRE/+zu7v+DgID/g4CA/+zu7v/s7u7/7O7u/+zu7v/s7u7/7O7u/+zu7v/s7u7/7O7u/+zu
7v/s7u7/7O7u/+zu7v/s7u7/g4CA/4+MjMODgID/g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/g4CA
/4OAgP+DgID/g4CA/4OAgP+DgID/g4CA/5CNjcb8HwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAABYAAAAsAAAAAQAgAAAAAACQ
BwAA1w0AANcNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AFwAAACsAAAArAAAAKwAAABcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVVVUBVVVV
AVVVVQZVVVUgVVVVbVVVVbhVVVXdVVVV81VVVf1VVVX/wMDA/5ycnP+Ghob/VVVV/1VVVf9VVVX1
VVVV1VVVVZZVVVVVVVVVLFVVVRxVVVUcyMjIAsjIyATIyMgHyMjIHcjIyGDIyMiuyMjI28jIyPOg
oKD9gICA/+Li4v/IyMj/oKCg/2ZmZv+AgID/oKCg9cjIyNfIyMiXyMjIVcjIyCzIyMgdyMjIHVVV
VQtVVVUPVVVVGVVVVTNVVVVvVVVVs1VVVeBVVVX0VVVV/VVVVf/i4uL/4uLi/8fHx/9VVVX/VVVV
/1VVVfpVVVXhVVVVsVVVVXBVVVVAVVVVK1VVVSgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAADMAAABcU1ZV/6CgoP9TVlX/AAAAXAAAADMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEpOTP/IyMj/Sk5M/wAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIOAgGaDgID/g4CA/4OAgP+DgID/g4CA
/4OAgP+DgID/g4CA/4OAgP9mZ2b/paOj/2ZnZv+DgID/g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/
g4CA/4OAgGaDgID/y8nJ//r4+P/6+Pj/+vj4//r4+P/6+Pj/+vj4//r4+P/6+Pj/5OPj//r4+P/k
4+P/+vj4//r4+P/6+Pj/+vj4//r4+P/6+Pj/+vj4/8vJyf+DgID/g4CA//n4+P/s6un/7Ono/+zp
6P/s6ej/7Onp/+zp6f/s6en/7Onp/+zp6f/s6en/7Onp/+zp6f/s6en/7Onp/+zp6f/s6en/6+jm
/+zq6f/5+Pj/g4CA/4OAgP/5+Pj/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/
h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/h0og/4dKIP+HSiD/+fj4/4OAgP+DgID/+vn5/4dKIP+o
cUb/rHdL/7J8UP+2gVb/u4db/8CMYP/Fk2b/yZhr/82dcP/Mm27/x5Zp/8ORZP++il7/uYVZ/7SA
VP+wek//h0og//n4+P+DgID/g4CA//r5+f+JTiX/uYxp/7yQbv+/lHH/7vDw/+zu7v/s7u7/7O7u
/+zu7v/JmWz/yZdq/8WUZ//CjmP/vYpe/7mEWP+0f1P/r3pO/4dKIP/5+Pj/g4CA/4OAgP/6+fn/
iU4l/7mNa/+8km//wJZz//Dx8f/w8fH/7/Dw/+3v7//s7u7/xZNm/8WSZv/CkGT/votf/7uHW/+2
g1f/sn1S/654TP+HSiD/+fj4/4OAgP+DgID/+vn5/4lOJf+5j27/vZNx/8CWdf/w8fH/8PHx//Dx
8f/w8fH/7/Hx/8WXbv/AjWD/7O7u/+zu7v/s7u7/tYBT/7B7T/+tdkr/h0og//r5+f+DgID/g4CA
//r5+f+JTiX/uo9v/72Tcv+/l3b/pHZX/6R2V/+kdlf/pHZX/6R2V//LpYT/y6KB/+7v7//s7u7/
7O7u/7J8Uf+teE3/qnNI/4dKIP/6+fn/g4CA/4OAgP/6+fn/iU4l/7qRcf+9lHT/v5Z3/8Kae//E
nH3/xp9//8ihgf/Io4P/yaOD/8mkg//x8vL/8PLy/+7w8P+yfVP/rXlO/6hyR/+HSiD/+vn5/4OA
gP+DgID/+vn5/4lOJf+5kXP/vJR1/7+WeP/BmXr/w5x9/8Wff//Gn4D/x6CC/8iigv/IooL/qX1f
/6l9X/+pfV//wpt8/8CZev+9lHX/h0og//r5+f+DgID/g4CA//r5+f+JTiX/uZFz/7uUdv++l3j/
wJl7/8Kbff/DnX//xZ6A/8Wggf/FoIL/xaCB/8Wfgf/Enn//w5x+/8CafP+/mHr/vJN2/4dKIP/6
+fn/g4CA/4OAgP/6+fn/iU0k//Lz8//y8/P/8vPz//Lz8//y8/P/8vPz//Lz8//y8/P/8vPz//Lz
8//y8/P/8vPz//Lz8//y8/P/8vPz//Hz8/+HSiD/+vn5/4OAgP+DgID/+/n5/4dKIP+HSiD/h0og
/4dKIP+HSiD/h0sh/4dLIf+HSyH/iEwi/4hMIv+ITCL/iEwj/4hMI/+ITCP/iU0k/4lNJP+JTST/
h0og//v5+f+DgID/g4CA//X09Pv7+fn/+/n5//v5+f/6+Pj/+vj4//r4+P/6+Pj/+vj4//r4+P/6
+Pj/+vj4//r4+P/6+Pj/+vj4//r4+P/6+Pj/+vj4//r5+f/29PT8g4CA/4OAgKODgID/g4CA/4OA
gP+DgID/g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/g4CA/4OAgP+DgID/g4CA
/4OAgP+DgID/g4CA/4OAgMH/g/wAAAAAAAAAAAAAAAAA/wH8AP/H/AAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA')
	#endregion
	$MainForm.MinimumSize = '700, 379'
	$MainForm.Name = "MainForm"
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = "LazyTS"
	$MainForm.add_Load($OnLoadFormEvent)
	#
	# datagridviewOutput
	#
	$datagridviewOutput.AllowUserToAddRows = $False
	$datagridviewOutput.AllowUserToDeleteRows = $False
	$datagridviewOutput.ContextMenuStrip = $contextmenustripTSSession
	$datagridviewOutput.Dock = 'Fill'
	$datagridviewOutput.Location = '0, 57'
	$datagridviewOutput.Name = "datagridviewOutput"
	$datagridviewOutput.ReadOnly = $True
	$datagridviewOutput.RowHeadersVisible = $False
	$datagridviewOutput.SelectionMode = 'FullRowSelect'
	$datagridviewOutput.Size = '723, 190'
	$datagridviewOutput.TabIndex = 5
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($buttonReset)
	$groupbox1.Controls.Add($buttonFilter)
	$groupbox1.Controls.Add($textboxHighlight)
	$groupbox1.Controls.Add($buttonHighlight)
	$groupbox1.Controls.Add($buttonMessage)
	$groupbox1.Controls.Add($textboxComputerName)
	$groupbox1.Controls.Add($labelComputerName)
	$groupbox1.Controls.Add($buttonGetTsSession)
	$groupbox1.Controls.Add($buttonProcess)
	$groupbox1.Dock = 'Top'
	$groupbox1.Location = '0, 0'
	$groupbox1.Name = "groupbox1"
	$groupbox1.Size = '723, 57'
	$groupbox1.TabIndex = 9
	$groupbox1.TabStop = $False
	#
	# buttonReset
	#
	$buttonReset.Anchor = 'Top, Right'
	$buttonReset.Enabled = $False
	$buttonReset.Location = '680, 32'
	$buttonReset.Name = "buttonReset"
	$buttonReset.Size = '43, 22'
	$buttonReset.TabIndex = 13
	$buttonReset.Text = "Reset"
	$buttonReset.UseVisualStyleBackColor = $True
	$buttonReset.add_Click($buttonReset_Click)
	#
	# buttonFilter
	#
	$buttonFilter.Anchor = 'Top, Right'
	$buttonFilter.Enabled = $False
	$buttonFilter.Location = '619, 12'
	$buttonFilter.Name = "buttonFilter"
	$buttonFilter.Size = '62, 22'
	$buttonFilter.TabIndex = 12
	$buttonFilter.Text = "Filter"
	$buttonFilter.UseVisualStyleBackColor = $True
	$buttonFilter.Visible = $False
	$buttonFilter.add_Click($buttonFilter_Click)
	#
	# textboxHighlight
	#
	$textboxHighlight.Anchor = 'Top, Right'
	$textboxHighlight.Location = '532, 33'
	$textboxHighlight.Name = "textboxHighlight"
	$textboxHighlight.Size = '87, 20'
	$textboxHighlight.TabIndex = 10
	$textboxHighlight.add_TextChanged($textboxHighlight_TextChanged)
	#
	# buttonHighlight
	#
	$buttonHighlight.Anchor = 'Top, Right'
	$buttonHighlight.Enabled = $False
	$buttonHighlight.Location = '619, 32'
	$buttonHighlight.Name = "buttonHighlight"
	$buttonHighlight.Size = '62, 22'
	$buttonHighlight.TabIndex = 9
	$buttonHighlight.Text = "Highlight"
	$buttonHighlight.UseVisualStyleBackColor = $True
	$buttonHighlight.add_Click($buttonHighlight_Click)
	#
	# buttonMessage
	#
	$buttonMessage.Font = "Microsoft Sans Serif, 8.25pt"
	#region Binary Data
	$buttonMessage.Image = [System.Convert]::FromBase64String('
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
h4ez3wFCsmtsCMAhlwAAAABJRU5ErkJggg==')
	#endregion
	$buttonMessage.ImageAlign = 'TopCenter'
	$buttonMessage.Location = '368, 9'
	$buttonMessage.Name = "buttonMessage"
	$buttonMessage.Size = '64, 45'
	$buttonMessage.TabIndex = 8
	$buttonMessage.Text = "Message"
	$buttonMessage.TextAlign = 'BottomCenter'
	$buttonMessage.UseVisualStyleBackColor = $True
	$buttonMessage.add_Click($buttonMessage_Click)
	#
	# textboxComputerName
	#
	$textboxComputerName.Font = "Microsoft Sans Serif, 12pt"
	$textboxComputerName.Location = '16, 27'
	$textboxComputerName.Name = "textboxComputerName"
	$textboxComputerName.Size = '206, 26'
	$textboxComputerName.TabIndex = 0
	$textboxComputerName.Text = "$env:computername"
	#
	# labelComputerName
	#
	$labelComputerName.Font = "Microsoft Sans Serif, 11.25pt, style=Bold"
	$labelComputerName.Location = '13, 9'
	$labelComputerName.Name = "labelComputerName"
	$labelComputerName.Size = '177, 23'
	$labelComputerName.TabIndex = 5
	$labelComputerName.Text = "Computer Name:"
	#
	# buttonGetTsSession
	#
	$buttonGetTsSession.ContextMenuStrip = $contextmenustripTSSession
	$buttonGetTsSession.Font = "Microsoft Sans Serif, 8.25pt"
	#region Binary Data
	$buttonGetTsSession.Image = [System.Convert]::FromBase64String('
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
rkJggg==')
	#endregion
	$buttonGetTsSession.ImageAlign = 'TopCenter'
	$buttonGetTsSession.Location = '228, 9'
	$buttonGetTsSession.Name = "buttonGetTsSession"
	$buttonGetTsSession.Size = '64, 45'
	$buttonGetTsSession.TabIndex = 1
	$buttonGetTsSession.Text = "Sessions"
	$buttonGetTsSession.TextAlign = 'BottomCenter'
	$tooltip1.SetToolTip($buttonGetTsSession, "Use Get-TSSession to get a list of sessions from a local or remote computers")
	$buttonGetTsSession.UseVisualStyleBackColor = $True
	$buttonGetTsSession.add_Click($buttonGetTsSession_Click)
	#
	# buttonProcess
	#
	$buttonProcess.Font = "Microsoft Sans Serif, 8.25pt"
	#region Binary Data
	$buttonProcess.Image = [System.Convert]::FromBase64String('
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
RK5CYII=')
	#endregion
	$buttonProcess.ImageAlign = 'TopCenter'
	$buttonProcess.Location = '298, 9'
	$buttonProcess.Name = "buttonProcess"
	$buttonProcess.Size = '64, 45'
	$buttonProcess.TabIndex = 4
	$buttonProcess.Text = "Process"
	$buttonProcess.TextAlign = 'BottomCenter'
	$tooltip1.SetToolTip($buttonProcess, "Use Get-TSProcess to get a list of session processes from a local or remote computers.")
	$buttonProcess.UseVisualStyleBackColor = $True
	$buttonProcess.add_Click($buttonProcess_Click)
	#
	# richtextboxStatus
	#
	$richtextboxStatus.Dock = 'Bottom'
	$richtextboxStatus.Font = "Consolas, 8.25pt"
	$richtextboxStatus.Location = '0, 247'
	$richtextboxStatus.Name = "richtextboxStatus"
	$richtextboxStatus.Size = '723, 71'
	$richtextboxStatus.TabIndex = 8
	$richtextboxStatus.Text = ""
	#
	# statusstrip1
	#
	[void]$statusstrip1.Items.Add($toolstripstatuslabel1)
	[void]$statusstrip1.Items.Add($toolstripstatuslabel2)
	$statusstrip1.Location = '0, 318'
	$statusstrip1.Name = "statusstrip1"
	$statusstrip1.RenderMode = 'Professional'
	$statusstrip1.Size = '723, 22'
	$statusstrip1.TabIndex = 12
	$statusstrip1.Text = "statusstrip1"
	#
	# tooltip1
	#
	#
	# helpprovider1
	#
	#
	# contextmenustripTSSession
	#
	[void]$contextmenustripTSSession.Items.Add($sendTSSessionToolStripMenuItem)
	[void]$contextmenustripTSSession.Items.Add($disconnectTSSessionToolStripMenuItem)
	[void]$contextmenustripTSSession.Items.Add($stopTSSessionToolStripMenuItem)
	[void]$contextmenustripTSSession.Items.Add($toolstripseparator1)
	[void]$contextmenustripTSSession.Items.Add($remoteDesktopToolStripMenuItem)
	[void]$contextmenustripTSSession.Items.Add($remoteDesktopShadowIDToolStripMenuItem)
	[void]$contextmenustripTSSession.Items.Add($remoteDesktopShadowControlToolStripMenuItem1)
	[void]$contextmenustripTSSession.Items.Add($powerShellRemotingToolStripMenuItem)
	$contextmenustripTSSession.Name = "contextmenustrip1"
	$contextmenustripTSSession.RenderMode = 'System'
	$contextmenustripTSSession.ShowImageMargin = $False
	$contextmenustripTSSession.Size = '233, 164'
	$contextmenustripTSSession.Text = "TSSession"
	#
	# disconnectTSSessionToolStripMenuItem
	#
	$disconnectTSSessionToolStripMenuItem.Name = "disconnectTSSessionToolStripMenuItem"
	$disconnectTSSessionToolStripMenuItem.Size = '232, 22'
	$disconnectTSSessionToolStripMenuItem.Text = "Disconnect Session"
	$disconnectTSSessionToolStripMenuItem.add_Click($disconnectTSSessionToolStripMenuItem_Click)
	#
	# sendTSSessionToolStripMenuItem
	#
	$sendTSSessionToolStripMenuItem.Name = "sendTSSessionToolStripMenuItem"
	$sendTSSessionToolStripMenuItem.Size = '232, 22'
	$sendTSSessionToolStripMenuItem.Text = "Send Message"
	$sendTSSessionToolStripMenuItem.ToolTipText = "Displays a message box to the selected session ID"
	$sendTSSessionToolStripMenuItem.add_Click($sendTSSessionToolStripMenuItem_Click)
	#
	# contextmenustripTSProcess
	#
	[void]$contextmenustripTSProcess.Items.Add($sendTSMessageToolStripMenuItem)
	[void]$contextmenustripTSProcess.Items.Add($stopTSProcessToolStripMenuItem)
	[void]$contextmenustripTSProcess.Items.Add($toolstripseparator2)
	[void]$contextmenustripTSProcess.Items.Add($remoteDesktopToolStripMenuItem1)
	[void]$contextmenustripTSProcess.Items.Add($remoteDesktopShadowToolStripMenuItem)
	[void]$contextmenustripTSProcess.Items.Add($remoteDesktopShadowControlToolStripMenuItem)
	[void]$contextmenustripTSProcess.Items.Add($powerShellRemotingToolStripMenuItem1)
	$contextmenustripTSProcess.Name = "contextmenustripTSProcess"
	$contextmenustripTSProcess.RenderMode = 'System'
	$contextmenustripTSProcess.ShowImageMargin = $False
	$contextmenustripTSProcess.Size = '233, 142'
	#
	# sendTSMessageToolStripMenuItem
	#
	$sendTSMessageToolStripMenuItem.Name = "sendTSMessageToolStripMenuItem"
	$sendTSMessageToolStripMenuItem.Size = '232, 22'
	$sendTSMessageToolStripMenuItem.Text = "Send Message"
	$sendTSMessageToolStripMenuItem.ToolTipText = "Displays a message box to the selected session ID"
	$sendTSMessageToolStripMenuItem.add_Click($sendTSSessionToolStripMenuItem_Click)
	#
	# stopTSProcessToolStripMenuItem
	#
	$stopTSProcessToolStripMenuItem.Name = "stopTSProcessToolStripMenuItem"
	$stopTSProcessToolStripMenuItem.Size = '232, 22'
	$stopTSProcessToolStripMenuItem.Text = "Stop Process"
	$stopTSProcessToolStripMenuItem.ToolTipText = "Use Stop-TSProcess to terminate one or more processes"
	$stopTSProcessToolStripMenuItem.add_Click($stopTSProcessToolStripMenuItem_Click)
	#
	# stopTSSessionToolStripMenuItem
	#
	$stopTSSessionToolStripMenuItem.Name = "stopTSSessionToolStripMenuItem"
	$stopTSSessionToolStripMenuItem.Size = '232, 22'
	$stopTSSessionToolStripMenuItem.Text = "Stop Session"
	$stopTSSessionToolStripMenuItem.add_Click($stopTSSessionToolStripMenuItem_Click)
	#
	# toolstripstatuslabel1
	#
	$toolstripstatuslabel1.Font = "Segoe UI, 9pt, style=Bold"
	$toolstripstatuslabel1.IsLink = $True
	$toolstripstatuslabel1.Name = "toolstripstatuslabel1"
	$toolstripstatuslabel1.Size = '116, 17'
	$toolstripstatuslabel1.Text = "LazyWinAdmin.com"
	$toolstripstatuslabel1.add_Click($toolstripstatuslabel1_Click)
	#
	# toolstripstatuslabel2
	#
	$toolstripstatuslabel2.Enabled = $False
	$toolstripstatuslabel2.Font = "Segoe UI, 9pt, style=Bold"
	$toolstripstatuslabel2.Name = "toolstripstatuslabel2"
	$toolstripstatuslabel2.Size = '114, 17'
	$toolstripstatuslabel2.Text = "Francois-Xavier Cat"
	#
	# toolstripseparator1
	#
	$toolstripseparator1.Name = "toolstripseparator1"
	$toolstripseparator1.Size = '229, 6'
	#
	# remoteDesktopToolStripMenuItem
	#
	$remoteDesktopToolStripMenuItem.Name = "remoteDesktopToolStripMenuItem"
	$remoteDesktopToolStripMenuItem.Size = '232, 22'
	$remoteDesktopToolStripMenuItem.Text = "Remote Desktop"
	$remoteDesktopToolStripMenuItem.add_Click($remoteDesktopToolStripMenuItem_Click)
	#
	# powerShellRemotingToolStripMenuItem
	#
	$powerShellRemotingToolStripMenuItem.Name = "powerShellRemotingToolStripMenuItem"
	$powerShellRemotingToolStripMenuItem.Size = '232, 22'
	$powerShellRemotingToolStripMenuItem.Text = "PowerShell Remoting"
	$powerShellRemotingToolStripMenuItem.add_Click($powerShellRemotingToolStripMenuItem_Click)
	#
	# toolstripseparator2
	#
	$toolstripseparator2.Name = "toolstripseparator2"
	$toolstripseparator2.Size = '229, 6'
	#
	# remoteDesktopToolStripMenuItem1
	#
	$remoteDesktopToolStripMenuItem1.Name = "remoteDesktopToolStripMenuItem1"
	$remoteDesktopToolStripMenuItem1.Size = '232, 22'
	$remoteDesktopToolStripMenuItem1.Text = "Remote Desktop"
	$remoteDesktopToolStripMenuItem1.add_Click($remoteDesktopToolStripMenuItem_Click)
	#
	# powerShellRemotingToolStripMenuItem1
	#
	$powerShellRemotingToolStripMenuItem1.Name = "powerShellRemotingToolStripMenuItem1"
	$powerShellRemotingToolStripMenuItem1.Size = '232, 22'
	$powerShellRemotingToolStripMenuItem1.Text = "PowerShell Remoting"
	$powerShellRemotingToolStripMenuItem1.add_Click($powerShellRemotingToolStripMenuItem_Click)
	#
	# remoteDesktopShadowIDToolStripMenuItem
	#
	$remoteDesktopShadowIDToolStripMenuItem.Name = "remoteDesktopShadowIDToolStripMenuItem"
	$remoteDesktopShadowIDToolStripMenuItem.Size = '232, 22'
	$remoteDesktopShadowIDToolStripMenuItem.Text = "Remote Desktop (Shadow View)"
	$remoteDesktopShadowIDToolStripMenuItem.add_Click($remoteDesktopShadowIDToolStripMenuItem_Click)
	#
	# remoteDesktopShadowToolStripMenuItem
	#
	$remoteDesktopShadowToolStripMenuItem.Name = "remoteDesktopShadowToolStripMenuItem"
	$remoteDesktopShadowToolStripMenuItem.Size = '232, 22'
	$remoteDesktopShadowToolStripMenuItem.Text = "Remote Desktop (Shadow View)"
	$remoteDesktopShadowToolStripMenuItem.add_Click($remoteDesktopShadowIDToolStripMenuItem_Click)
	#
	# remoteDesktopShadowControlToolStripMenuItem
	#
	$remoteDesktopShadowControlToolStripMenuItem.Name = "remoteDesktopShadowControlToolStripMenuItem"
	$remoteDesktopShadowControlToolStripMenuItem.Size = '232, 22'
	$remoteDesktopShadowControlToolStripMenuItem.Text = "Remote Desktop (Shadow Control)"
	$remoteDesktopShadowControlToolStripMenuItem.add_Click($remoteDesktopShadowControlToolStripMenuItem_Click)
	#
	# remoteDesktopShadowControlToolStripMenuItem1
	#
	$remoteDesktopShadowControlToolStripMenuItem1.Name = "remoteDesktopShadowControlToolStripMenuItem1"
	$remoteDesktopShadowControlToolStripMenuItem1.Size = '232, 22'
	$remoteDesktopShadowControlToolStripMenuItem1.Text = "Remote Desktop (Shadow Control)"
	$remoteDesktopShadowControlToolStripMenuItem1.add_Click($remoteDesktopShadowControlToolStripMenuItem_Click)
	$contextmenustripTSProcess.ResumeLayout()
	$contextmenustripTSSession.ResumeLayout()
	$statusstrip1.ResumeLayout()
	$groupbox1.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#requires -version 3
	
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	#Location of the script
	function Get-ScriptDirectory
	{ 
		if($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	# PSTerminalServices Module Requirements
	# Get the path of the DLL file: Cassia.dll (.net library)
	$CassiaPath = Join-Path -Path (Get-ScriptDirectory) -ChildPath "Cassia.dll"
	# Load the DLL
	if (-not(Test-Path $CassiaPath)){Write-Warning -Message "The file Cassia.dll is missing. The Script can't continue without this file";exit}
	[Reflection.Assembly]::LoadFile($CassiaPath) | Out-Null
	
	# From WinFormPS
	function Append-RichtextboxStatus{
		PARAM(
		[Parameter(Mandatory=$true)]
		[string]$Message,
		[string]$MessageColor = "DarkGreen",
		[string]$DateTimeColor="Black",
		[string]$Source,
		[string]$SourceColor="Gray",
		[string]$ComputerName,
		[String]$ComputerNameColor= "Blue")
		
		$SortableTime = get-date -Format "yyyy-MM-dd HH:mm:ss"
		$richtextboxStatus.SelectionColor = $DateTimeColor
		$richtextboxStatus.AppendText("[$SortableTime] ")
		
		IF ($PSBoundParameters['ComputerName']){
			$richtextboxStatus.SelectionColor = $ComputerNameColor
			$richtextboxStatus.AppendText(("$ComputerName ").ToUpper())
		}
		
		IF ($PSBoundParameters['Source']){
			$richtextboxStatus.SelectionColor = $SourceColor
			$richtextboxStatus.AppendText("$Source ")
		}
		
		$richtextboxStatus.SelectionColor = $MessageColor
		$richtextboxStatus.AppendText("$Message`r")
		$richtextboxStatus.Refresh()
		$richtextboxStatus.ScrollToCaret()
		
		Write-Verbose -Message "$SortableTime $Message"
	}
	
	function Set-DataGridView
	{
		<#
			.SYNOPSIS
				This function helps you edit the datagridview control
		
			.DESCRIPTION
				This function helps you edit the datagridview control
		
			.EXAMPLE
				Set-DataGridView -DataGridView $datagridview1 -ProperFormat -FontFamily $listboxFontFamily.Text -FontSize $listboxFontSize.Text
		
			.EXAMPLE
				Set-DataGridView -DataGridView $datagridview1 -AlternativeRowColor -BackColor 'AliceBlue' -ForeColor 'Black'
		
			.EXAMPLE
				Set-DataGridViewRowHeader -DataGridView $datagridview1 -HideRowHeader
		
			.EXAMPLE
				Set-DataGridViewRowHeader -DataGridView $datagridview1 -ShowRowHeader
		
			.NOTES
				Author: Francois-Xavier Cat
				Twitter:@LazyWinAdm
				WWW: 	lazywinadmin.com
		#>
		
		[CmdletBinding()]
		PARAM (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			
			[Parameter(Mandatory = $true, ParameterSetName = "AlternativeRowColor")]
			[Switch]$AlternativeRowColor,
			
			[Parameter(ParameterSetName = "DefaultRowColor")]
			[Switch]$DefaultRowColor,
			
			[Parameter(Mandatory = $true, ParameterSetName = "AlternativeRowColor")]
			[Parameter(ParameterSetName = "DefaultRowColor")]
			[System.Drawing.Color]$ForeColor,
			
			[Parameter(Mandatory = $true, ParameterSetName = "AlternativeRowColor")]
			[Parameter(ParameterSetName = "DefaultRowColor")]
			[System.Drawing.Color]$BackColor,
			
			[Parameter(Mandatory = $true, ParameterSetName = "Proper")]
			[Switch]$ProperFormat,
			
			[Parameter(ParameterSetName = "Proper")]
			[String]$FontFamily = "Consolas",
			
			[Parameter(ParameterSetName = "Proper")]
			[Int]$FontSize = 10,
			
			[Parameter(ParameterSetName = "HideRowHeader")]
			[Switch]$HideRowHeader,
			[Parameter(ParameterSetName = "ShowRowHeader")]
			[Switch]$ShowRowHeader
		)
		PROCESS
		{
			if ($psboundparameters['AlternativeRowColor'])
			{
				$DataGridView.AlternatingRowsDefaultCellStyle.ForeColor = $ForeColor
				$DataGridView.AlternatingRowsDefaultCellStyle.BackColor = $BackColor
			}
			
			if ($psboundparameters['DefaultRowColor'])
			{
				$DataGridView.RowsDefaultCellStyle.ForeColor = $ForeColor
				$DataGridView.RowsDefaultCellStyle.BackColor = $BackColor
			}
			
			
			if ($psboundparameters['ProperFormat'])
			{
				#$Font = New-Object -TypeName System.Drawing.Font -ArgumentList "Segoi UI", 10
				$Font = New-Object -TypeName System.Drawing.Font -ArgumentList $FontFamily, $FontSize
				
				#[System.Drawing.FontStyle]::Bold
				
				$DataGridView.ColumnHeadersBorderStyle = 'Raised'
				$DataGridView.BorderStyle = 'Fixed3D'
				$DataGridView.SelectionMode = 'FullRowSelect'
				$DataGridView.AllowUserToResizeRows = $false
				$datagridview.DefaultCellStyle.font = $Font
			}
			
			if ($psboundparameters['HideRowHeader'])
			{
				$DataGridView.RowHeadersVisible = $false
			}
			if ($psboundparameters['ShowRowHeader'])
			{
				$DataGridView.RowHeadersVisible = $true
			}
		}
		
	}#Set-DataGridView
	
	function Reset-DataGridViewFormat
	{
	<#
		.SYNOPSIS
			The Reset-DataGridViewFormat function will reset the format of a datagridview control
		
		.DESCRIPTION
			The Reset-DataGridViewFormat function will reset the format of a datagridview control
		
		.PARAMETER DataGridView
			Specifies the DataGridView Control.
		
		.EXAMPLE
			PS C:\> Reset-DataGridViewFormat -DataGridView $DataGridViewObj
		
		.NOTES
			Author: Francois-Xavier Cat
			Twitter:@LazyWinAdm
			WWW: 	lazywinadmin.com
	#>
		[CmdletBinding()]
		PARAM (
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView)
		PROCESS
		{
			$DataSource = $DataGridView.DataSource
			$DataGridView.DataSource = $null
			$DataGridView.DataSource = $DataSource
			
			#$DataGridView.RowsDefaultCellStyle.BackColor = 'White'
			#$DataGridView.RowsDefaultCellStyle.ForeColor = 'Black'
			$DataGridView.RowsDefaultCellStyle = $null
			$DataGridView.AlternatingRowsDefaultCellStyle = $null
		}
	}#Reset-DataGridViewFormat
	
	function Find-DataGridViewValue
	{
	<#
		.SYNOPSIS
			The Find-DataGridViewValue function helps you to find a specific value and select the cell, row or to set a fore and back color.
		
		.DESCRIPTION
			The Find-DataGridViewValue function helps you to find a specific value and select the cell, row or to set a fore and back color.
		
		.PARAMETER DataGridView
			Specifies the DataGridView Control to use
		
		.PARAMETER RowBackColor
			Specifies the back color of the row to use
		
		.PARAMETER RowForeColor
			Specifies the fore color of the row to use
		
		.PARAMETER SelectCell
			Specifies to select only the cell when the value is found
		
		.PARAMETER SelectRow
			Specifies to select the entire row when the value is found
		
		.PARAMETER Value
			Specifies the value to search
		
		.EXAMPLE
			PS C:\> Find-DataGridViewValue -DataGridView $datagridview1 -Value $textbox1.Text
		
			This will find the value and select the cell(s)
		
		.EXAMPLE
			PS C:\> Find-DataGridViewValue -DataGridView $datagridview1 -Value $textbox1.Text -RowForeColor 'Red' -RowBackColor 'Black'
		
			This will find the value and color the fore and back of the row
		.EXAMPLE
			PS C:\> Find-DataGridViewValue -DataGridView $datagridview1 -Value $textbox1.Text -SelectRow
		
			This will find the value and select the entire row
		
		.NOTES
			Francois-Xavier Cat
			@lazywinadm
			www.lazywinadmin.com
	#>
		[CmdletBinding(DefaultParameterSetName = "Cell")]
		PARAM (
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			
		[ValidateNotNull()]	
		[Parameter(Mandatory = $true)]
			[String]$Value,
			[Parameter(ParameterSetName = "Cell")]
			[Switch]$SelectCell,
			
			[Parameter(ParameterSetName = "Row")]
			[Switch]$SelectRow,
			
			#[Parameter(ParameterSetName = "Column")]
			#[Switch]$SelectColumn,
			[Parameter(ParameterSetName = "RowColor")]
			[system.Drawing.Color]$RowForeColor,
			[Parameter(ParameterSetName = "RowColor")]
			[system.Drawing.Color]$RowBackColor
		)
		
		PROCESS
		{
			$DataGridView.ClearSelection()
			
			FOR ([int]$i = 0; $i -lt $DataGridView.RowCount; $i++)
			{
				FOR ([int] $j = 0; $j -lt $DataGridView.ColumnCount; $j++)
				{
					$CurrentCell = $dataGridView.Rows[$i].Cells[$j]
					
					#if ((-not $CurrentCell.Value.Equals([DBNull]::Value)) -and ($CurrentCell.Value.ToString() -like "*$Value*"))
					if ($CurrentCell.Value.ToString() -match $Value)
					{
						
						# Row Selection
						IF ($PSBoundParameters['SelectRow'])
						{
							$dataGridView.Rows[$i].Selected = $true
						}
						
						<#
						# Column Selection
						IF ($PSBoundParameters['SelectColumn'])
						{
							#$DataGridView.Columns[$($CurrentCell.ColumnIndex)].Selected = $true
							#$DataGridView.Columns[$j].Selected = $true
							#$CurrentCell.DataGridView.Columns[$j].Selected = $true
						}
						#>
						
						# Row Fore Color
						IF ($PSBoundParameters['RowForeColor'])
						{
							$dataGridView.Rows[$i].DefaultCellStyle.ForeColor = $RowForeColor
						}
						# Row Back Color
						IF ($PSBoundParameters['RowBackColor'])
						{
							$dataGridView.Rows[$i].DefaultCellStyle.BackColor = $RowBackColor
						}
						
						# Cell Selection
						ELSEIF (-not ($PSBoundParameters['SelectRow']) -and -not ($PSBoundParameters['SelectColumn']))
						{
							$CurrentCell.Selected = $true
						}
					}#IF not empty and contains value
				}#For Each column
			}#For Each Row
		}#PROCESS
	}#Find-DataGridViewValue
	
	function Set-DataGridViewFilter
	{
	<#
		.SYNOPSIS
			The function Set-DataGridViewFilter helps to only show specific entries with a specific value
		
		.DESCRIPTION
			The function Set-DataGridViewFilter helps to only show specific entries with a specific value.
			The data needs to be in a DataTable Object. You can use ConvertTo-DataTable to convert your
			PowerShell object into a DataTable object.
		
		.PARAMETER AllColumns
			Specifies to search all the column
		
		.PARAMETER ColumnName
			Specifies to search in a specific column name
		
		.PARAMETER DataGridView
			Specifies the DataGridView control where the data will be filtered
		
		.PARAMETER DataTable
			Specifies the DataTable object that is most likely the original source of the DataGridView
		
		.PARAMETER Filter
			Specifies the string to search
		
		.EXAMPLE
			PS C:\> Set-DataGridViewFilter -DataGridView $datagridview1 -DataTable $ProcessesDT -AllColumns -Filter $textbox1.Text
		
		.EXAMPLE
			PS C:\> Set-DataGridViewFilter -DataGridView $datagridview1 -DataTable $ProcessesDT -ColumnName "Name" -Filter $textbox1.Text
	
		.NOTES
			Author: Francois-Xavier Cat
			Twitter:@LazyWinAdm
			WWW: 	lazywinadmin.com
	#>
		PARAM (
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[Parameter(Mandatory = $true)]
			[System.Data.DataTable]$DataTable,
			[Parameter(Mandatory = $true)]
			[String]$Filter,
			
			[Parameter(Mandatory = $true, ParameterSetName = "OneColumn")]
			[String]$ColumnName,
			[Parameter(Mandatory = $true, ParameterSetName = "AllColumns")]
			[Switch]$AllColumns
		)
		PROCESS
		{
			$Filter = $Filter.ToString()
			
			IF ($PSBoundParameters['AllColumns'])
			{
				FOREACH ($Column in $DataTable.Columns)
				{
					#$RowFilter += "Convert("+$($Column.ColumnName)+",'system.string') Like '%"{1}%' OR " -f $Column.ColumnName, $Filter
					$RowFilter += "Convert($($Column.ColumnName),'system.string') Like '%$Filter%' OR "
				}
				
				# Remove the last 'OR'
				$RowFilter = $RowFilter -replace " OR $", ''
				
				#Append-RichtextboxStatus -Message $RowFilter
			}
			IF ($PSBoundParameters['ColumnName'])
			{
				$RowFilter = "$ColumnName LIKE '%$Filter%'"
			}
			
			$DataTable.defaultview.rowfilter = $RowFilter
			Load-DataGridView -DataGridView $DataGridView -Item $DataTable
		}
		END { Remove-Variable -Name $RowFilter -ErrorAction 'SilentlyContinue' | Out-Null }
	}#Set-DataGridViewFilter
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($Table -eq $null)
		{
			$Table = New-Object System.Data.DataTable
		}
	
		if($InputObject-is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		else
		{
			if(-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
	
				if($InputObject -eq $null){ return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach($item in $InputObject)
				{
					if($item -ne $null)
					{
						$object = $item
						break	
					}
				}
	
				if($object -eq $null) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if(-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if($prop.Value -ne $null)
						{
							try{ $type = $prop.Value.GetType() } catch {}
						}
	
						if($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
			      			[void]$table.Columns.Add($prop.Name, $type) 
						}
						else #Type info not found
						{ 
							[void]$table.Columns.Add($prop.Name) 	
						}
					}
			    }
				
				if($object -is [System.Data.DataRow])
				{
					foreach($item in $InputObject)
					{	
						$Table.Rows.Add($item)
					}
					return  @(,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()	
			}
			
			foreach($item in $InputObject)
			{		
				$row = $table.NewRow()
				
				if($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
	
		return @(,$Table)	
	}
	
	function Load-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The ComboBox control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the ComboBox's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{	
				$array.Add($Item)	
			}
			$DataGridView.DataSource = $array
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function Set-TextBox
	{
		[CmdletBinding()]
		PARAM (
			[System.Windows.Forms.TextBox]$TextBox,
			[System.Drawing.Color]$BackColor
		)
		BEGIN { }
		PROCESS
		{
			TRY
			{
				$TextBox.BackColor = $BackColor
			}
			CATCH { }
		}
	}
	
	function Disable-Button
	{
	<#
	.SYNOPSIS
		This function will disable a button control
	.EXAMPLE
		Disable-Button -Button $Button
	.NOTES
		Francois-Xavier Cat
		@lazywinadm
		www.lazywinadmin.com
	#>
		[CmdletBinding()]
		PARAM (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.Button[]]$Button
		)
		BEGIN
		{
			Add-Type -AssemblyName System.Windows.Forms
		}
		PROCESS
		{
			foreach ($ButtonObject in $Button)
			{
				$ButtonObject.Enabled = $false
			}
			
		}
	}#Disable-Button
	
	function Reset-TextBox
	{
		[CmdletBinding()]
		PARAM (
			[System.Windows.Forms.TextBox]$TextBox,
			[System.Drawing.Color]$BackColor = "White",
			[System.Drawing.Color]$ForeColor = "Black"
		)
		BEGIN { }
		PROCESS
		{
			TRY
			{
				$TextBox.Text = ""
				$TextBox.BackColor = $BackColor
				$TextBox.ForeColor = $ForeColor
			}
			CATCH { }
		}
	}
	
	function Enable-Button
	{
	<#
	.SYNOPSIS
		This function will enable a button control
	.EXAMPLE
		Enable-Button -Button $Button
	.NOTES
		Francois-Xavier Cat
		@lazywinadm
		www.lazywinadmin.com
	#>
		[CmdletBinding()]
		PARAM (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.Button[]]$Button
		)
		BEGIN
		{
			Add-Type -AssemblyName System.Windows.Forms
		}
		PROCESS
		{
			foreach ($ButtonObject in $Button)
			{
				$ButtonObject.Enabled = $true
			}
		}
	}#Enable-Button
	
	function Clear-DataGridViewSelection
	{
		PARAM (
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView
		)
		$DataGridView.ClearSelection()
	}
	
	function New-MessageBox
	{
	<#
		.SYNOPSIS
			The New-MessageBox functio will show a message box to the user
		
		.DESCRIPTION
			The New-MessageBox functio will show a message box to the user
		
		.PARAMETER Message
			Specifies the message to show
		
		.PARAMETER Title
			Specifies the title of the message box
		
		.PARAMETER Buttons
			Specifies which button to add. Just press tab to see the choices
		
		.PARAMETER Icon
			Specifies the icon to show. Just press tab to see the choices
		
		.EXAMPLE
			PS C:\> New-MessageBox -Message "Hello World" -Title "First Message" -Buttons "RetryCancel" -Icon "Asterix"
		
		.NOTES
			Author: Francois-Xavier Cat
			Twitter:@LazyWinAdm
			WWW: 	lazywinadmin.com
	#>
		[CmdletBinding()]
		PARAM (
			
			[String]$Message,
			[String]$Title,
			[System.Windows.Forms.MessageBoxButtons]$Buttons = "OK",
			[System.Windows.Forms.MessageBoxIcon]$Icon = "None"
		)
		BEGIN
		{
			Add-Type -AssemblyName System.Windows.Forms
		}
		PROCESS
		{
			[System.Windows.Forms.MessageBox]::Show($Message, $Title, $Buttons, $Icon)
		}
	}#New-MessageBox
	
	# PSTerminalServices Module by Shay Levy
	$script:Server='localhost'
	function Get-TSSession
	{
		<#
		.SYNOPSIS
			Lists the sessions on a given terminal server.
	
		.DESCRIPTION
			Use Get-TSSession to get a list of sessions from a local or remote computers.
			Note that Get-TSSession is using Aliased properties to display the output on the console (IPAddress and State), these attributes
			are not the same as the original attributes (ClientIPAddress and ConnectionState).
			This is important when you want to use the -Filter parameter which requires the latter.
			To see all aliassed properties and their corresponding properties (Definition column), pipe the result to Get-Member:
	
			PS > Get-TSSession | Get-Member -MemberType AliasProperty
	
			   TypeName: Cassia.Impl.TerminalServicesSession
	
			Name      MemberType    Definition
			----      ----------    ----------
			(...)
			IPAddress AliasProperty IPAddress = ClientIPAddress
			State     AliasProperty State = ConnectionState
	
	
		.PARAMETER ComputerName
		    	The name of the terminal server computer. The default is the local computer. Default value is the local computer (localhost).
	
		.PARAMETER Id
			Specifies the session Id number.
	
		.PARAMETER InputObject
			   Specifies a session object. Enter a variable that contains the object, or type a command or expression that gets the sessions.
	
		.PARAMETER Filter
			   Specifies a filter based on the session properties. The syntax of the filter, including the use of
			   wildcards and depends on the properties of the session. Internally, The Filter parameter uses client side
			   filtering using the Where-Object cmdlet, objects are filtered after they are retrieved.
	
		.PARAMETER State
			The connection state of the session. Use this parameter to get sessions of a specific state. Valid values are:
	
			Value		 Description
			-----		 -----------
			Active		 A user is logged on to the session.
			ConnectQuery The session is in the process of connecting to a client.
			Connected	 A client is connected to the session).
			Disconnected The session is active, but the client has disconnected from it.
			Down		 The session is down due to an error.
			Idle		 The session is waiting for a client to connect.
			Initializing The session is initializing.
			Listening 	 The session is listening for connections.
			Reset		 The session is being reset.
			Shadowing	 This session is shadowing another session.
	
		.PARAMETER ClientName
			The name of the machine last connected to a session.
			Use this parameter to get sessions made from a specific computer name. Wildcrads are permitted.
	
		.PARAMETER UserName
			Use this parameter to get sessions made by a specific user name. Wildcrads are permitted.
	
		.EXAMPLE
			Get-TSSession
	
			Description
			-----------
			Gets all the sessions from the local computer.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 -State Disconnected
	
			Description
			-----------
			Gets all the disconnected sessions from the remote computer 'comp1'.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 -Filter {$_.ClientIPAddress -like '10*' -AND $_.ConnectionState -eq 'Active'}
	
			Description
			-----------
			Gets all Active sessions from remote computer 'comp1', made from ip addresses that starts with '10'.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 -UserName a*
	
			Description
			-----------
			Gets all sessions from remote computer 'comp1' made by users with name starts with the letter 'a'.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 -ClientName s*
	
			Description
			-----------
			Gets all sessions from remote computer 'comp1' made from a computers names that starts with the letter 's'.
	
		.OUTPUTS
			Cassia.Impl.TerminalServicesSession
	
		.COMPONENT
			TerminalServer
	
		.NOTES
			Author: Shay Levy
			Blog  : http://blogs.microsoft.co.il/blogs/ScriptFanatic/
	
		.LINK
			http://code.msdn.microsoft.com/PSTerminalServices
	
		.LINK
			http://code.google.com/p/cassia/
	
		.LINK
			Stop-TSSession
			Disconnect-TSSession
			Send-TSMessage
		#>
	
	
		[OutputType('Cassia.Impl.TerminalServicesSession')]
		[CmdletBinding(DefaultParameterSetName='Session')]
	
		Param(
	
			[Parameter()]
			[Alias('CN','IPAddress')]
			[System.String]$ComputerName,
	
			[Parameter(
				Position=0,
				ValueFromPipelineByPropertyName=$true,
				ParameterSetName='Session'
			)]
			[Alias('SessionID')]
			[ValidateRange(0,65536)]
			[System.Int32]$Id=-1,
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				ValueFromPipeline=$true,
				ParameterSetName='InputObject'
			)]
			[Cassia.Impl.TerminalServicesSession]$InputObject,
	
			[Parameter(
				Mandatory=$true,
				ParameterSetName='Filter'
			)]
			[ScriptBlock]$Filter,
	
			[Parameter()]
			[ValidateSet('Active','Connected','ConnectQuery','Shadowing','Disconnected','Idle','Listening','Reset','Down','Initializing')]
			[Alias('ConnectionState')]
			[System.String]$State='*',
	
			[Parameter()]
			[System.String]$ClientName='*',
	
			[Parameter()]
			[System.String]$UserName='*'
		)
	
	
		begin
		{
			try
			{
				$FuncName = $MyInvocation.MyCommand
				Write-Verbose "[$funcName] Entering Begin block."
	
				if(!$ComputerName)
				{
					Write-Verbose "[$funcName] $ComputerName is not defined, loading global value '$script:Server'."
					$ComputerName = Get-TSGlobalServerName
				}
				else
				{
					$ComputerName = Set-TSGlobalServerName -ComputerName $ComputerName
				}
	
	
				Write-Verbose "[$FuncName] Attempting remote connection to '$ComputerName'"
				$TSManager = New-Object Cassia.TerminalServicesManager
				$TSRemoteServer = $TSManager.GetRemoteServer($ComputerName)
				$TSRemoteServer.Open()
	
				if(!$TSRemoteServer.IsOpen)
				{
					Throw 'Connection to remote server is not open. Use Connect-TSServer to connect first.'
				}
	
				Write-Verbose "[$FuncName] Connection is open '$ComputerName'"
				Write-Verbose "[$FuncName] Updating global Server name '$ComputerName'"
				$null = Set-TSGlobalServerName -ComputerName $ComputerName
			}
			catch
			{
				Throw
			}
		}
	
	
		Process
		{
	
			Write-Verbose "[$funcName] Entering Process block."
	
			try
			{
				if($PSCmdlet.ParameterSetName -eq 'Session')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					if($Id -lt 0)
					{
						$session = $TSRemoteServer.GetSessions()
					}
					else
					{
						$session = $TSRemoteServer.GetSession($Id)
					}
				}
	
				if($PSCmdlet.ParameterSetName -eq 'InputObject')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					$session = $InputObject
				}
	
				if($PSCmdlet.ParameterSetName -eq 'Filter')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
	
					$TSRemoteServer.GetSessions() | Where-Object $Filter
				}
	
				if($session)
				{
					$session | Where-Object {$_.ConnectionState -like $State -AND $_.UserName -like $UserName -AND $_.ClientName -like $ClientName } | `
					Add-Member -MemberType AliasProperty -Name IPAddress -Value ClientIPAddress -PassThru | `
					Add-Member -MemberType AliasProperty -Name State -Value ConnectionState -PassThru
				}
			}
			catch
			{
				Throw
			}
		}
	
		end
		{
			try
			{
				Write-Verbose "[$funcName] Entering End block."
				Write-Verbose "[$funcName] Disconnecting from remote server '$($TSRemoteServer.ServerName)'"
				$TSRemoteServer.Close()
				$TSRemoteServer.Dispose()
			}
			catch
			{
				Throw
			}
		}
	}
	
	function Disconnect-TSSession
	{
	
		<#
		.SYNOPSIS
			Disconnects any connected user from the session.
	
		.DESCRIPTION
			Disconnect-TSSession disconnects any connected user from a session on local or remote computers.
	
		.PARAMETER ComputerName
		    	The name of the terminal server computer. The default is the local computer. Default value is the local computer (localhost).
	
		.PARAMETER Id
			Specifies the session Id number.
	
		.PARAMETER InputObject
			   Specifies a session object. Enter a variable that contains the object, or type a command or expression that gets the sessions.
	
		.PARAMETER Synchronous
		       When the Synchronous parameter is present the command waits until the session is fully disconnected otherwise it returns
		       immediately, even though the session may not be completely disconnected yet.
	
		.PARAMETER Force
		       Overrides any confirmations made by the command.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 | Disconnect-TSSession
	
			Description
			-----------
			Disconnects all connected users from Active sessions on remote computer 'comp1'. The caller is prompted to
			By default, the caller is prompted to confirm each action.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 -State Active | Disconnect-TSSession -Force
	
			Description
			-----------
			Disconnects any connected user from Active sessions on remote computer 'comp1'.
			By default, the caller is prompted to confirm each action. To override confirmations, the Force Switch parameter is specified.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 -State Active -Synchronous | Disconnect-TSSession -Force
	
			Description
			-----------
			Disconnects any connected user from Active sessions on remote computer 'comp1'. The Synchronous parameter tells the command to
			wait until the session is fully disconnected and only tghen it proceeds to the next session object.
			By default, the caller is prompted to confirm each action. To override confirmations, the Force Switch parameter is specified.
	
		.OUTPUTS
	
		.COMPONENT
			TerminalServer
	
		.NOTES
			Author: Shay Levy
			Blog  : http://blogs.microsoft.co.il/blogs/ScriptFanatic/
	
		.LINK
			http://code.msdn.microsoft.com/PSTerminalServices
	
		.LINK
			http://code.google.com/p/cassia/
	
		.LINK
			Get-TSSession
			Stop-TSSession
			Send-TSMessage
		#>
	
		[CmdletBinding(SupportsShouldProcess=$true,ConfirmImpact='High',DefaultParameterSetName='Id')]
	
		Param(
	
			[Parameter()]
			[Alias('CN','IPAddress')]
			[System.String]$ComputerName=$script:server,
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				ParameterSetName='Id',
				ValueFromPipelineByPropertyName=$true
			)]
			[Alias('SessionId')]
			[System.Int32]$Id,
	
			[Parameter(
				Mandatory=$true,
				ValueFromPipeline=$true,
				ParameterSetName='InputObject'
			)]
			[Cassia.Impl.TerminalServicesSession]$InputObject,
	
			[switch]$Synchronous,
	
			[switch]$Force
		)
	
		begin
		{
			try
			{
				$FuncName = $MyInvocation.MyCommand
				Write-Verbose "[$funcName] Entering Begin block."
	
				if(!$ComputerName)
				{
					Write-Verbose "[$funcName] $ComputerName is not defined, loading global value '$script:Server'."
					$ComputerName = Get-TSGlobalServerName
				}
				else
				{
					$ComputerName = Set-TSGlobalServerName -ComputerName $ComputerName
				}
	
				Write-Verbose "[$FuncName] Attempting remote connection to '$ComputerName'"
				$TSManager = New-Object Cassia.TerminalServicesManager
				$TSRemoteServer = $TSManager.GetRemoteServer($ComputerName)
				$TSRemoteServer.Open()
	
				if(!$TSRemoteServer.IsOpen)
				{
					Throw 'Connection to remote server is not open. Use Connect-TSServer to connect first.'
				}
	
				Write-Verbose "[$FuncName] Connection is open '$ComputerName'"
				Write-Verbose "[$FuncName] Updating global Server name '$ComputerName'"
				$null = Set-TSGlobalServerName -ComputerName $ComputerName
			}
			catch
			{
				Throw
			}
		}
	
	
		Process
		{
	
			Write-Verbose "[$funcName] Entering Process block."
	
			try
			{
				if($PSCmdlet.ParameterSetName -eq 'Id')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					$session = $TSRemoteServer.GetSession($Id)
				}
	
				if($PSCmdlet.ParameterSetName -eq 'InputObject')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					$session  = $InputObject
				}
	
	
				if($session -ne $null)
				{
					if($Force -or $PSCmdlet.ShouldProcess($TSRemoteServer.ServerName,"Disconnecting session id '$($session.sessionId)'"))
					{
						if($session.ConnectionState -ne 'Disconnected')
						{
							$session.Disconnect($Synchronous)
						}
						else
						{
							Write-Verbose 'Session is already in Disconnected mode.'
						}
					}
				}
			}
			catch
			{
				Throw
			}
		}
	
		end
		{
			try
			{
				Write-Verbose "[$funcName] Entering End block."
				Write-Verbose "[$funcName] Disconnecting from remote server '$($TSRemoteServer.ServerName)'"
				$TSRemoteServer.Close()
				$TSRemoteServer.Dispose()
			}
			catch
			{
				Throw
			}
		}
	}
	
	function Stop-TSSession
	{
	
		<#
		.SYNOPSIS
			Logs the session off, disconnecting any user that might be connected.
	
		.DESCRIPTION
			Use Stop-TSSession to logoff the session and disconnect any user that might be connected.
	
		.PARAMETER ComputerName
		    	The name of the terminal server computer. The default is the local computer. Default value is the local computer (localhost).
	
		.PARAMETER Id
			Specifies the session Id number.
	
		.PARAMETER InputObject
			   Specifies a session object. Enter a variable that contains the object, or type a command or expression that gets the sessions.
	
		.PARAMETER Synchronous
		       When the Synchronous parameter is present the command waits until the session is fully disconnected otherwise it returns
		       immediately, even though the session may not be completely disconnected yet.
	
		.PARAMETER Force
		       Overrides any confirmations made by the command.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 | Stop-TSSession
	
			Description
			-----------
			logs off all connected users from Active sessions on remote computer 'comp1'. The caller is prompted to
			By default, the caller is prompted to confirm each action.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 -State Active | Stop-TSSession -Force
	
			Description
			-----------
			logs off any connected user from Active sessions on remote computer 'comp1'.
			By default, the caller is prompted to confirm each action. To override confirmations, the Force Switch parameter is specified.
	
		.EXAMPLE
			Get-TSSession -ComputerName comp1 -State Active -Synchronous | Stop-TSSession -Force
	
			Description
			-----------
			logs off any connected user from Active sessions on remote computer 'comp1'. The Synchronous parameter tells the command to
			wait until the session is fully disconnected and only tghen it proceeds to the next session object.
			By default, the caller is prompted to confirm each action. To override confirmations, the Force Switch parameter is specified.
	
		.OUTPUTS
	
		.COMPONENT
			TerminalServer
	
		.NOTES
			Author: Shay Levy
			Blog  : http://blogs.microsoft.co.il/blogs/ScriptFanatic/
	
		.LINK
			http://code.msdn.microsoft.com/PSTerminalServices
	
		.LINK
			http://code.google.com/p/cassia/
	
		.LINK
			Get-TSSession
			Disconnect-TSSession
			Send-TSMessage
		#>
	
		[CmdletBinding(SupportsShouldProcess=$true,ConfirmImpact='High',DefaultParameterSetName='Id')]
	
		Param(
	
			[Parameter()]
			[Alias('CN','IPAddress')]
			[System.String]$ComputerName=$script:server,
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				ParameterSetName='Id',
				ValueFromPipelineByPropertyName=$true
			)]
			[Alias('SessionId')]
			[System.Int32]$Id,
	
			[Parameter(
				Mandatory=$true,
				ValueFromPipeline=$true,
				ParameterSetName='InputObject'
			)]
			[Cassia.Impl.TerminalServicesSession]$InputObject,
	
			[switch]$Synchronous,
	
			[switch]$Force
		)
	
		begin
		{
			try
			{
				$FuncName = $MyInvocation.MyCommand
				Write-Verbose "[$funcName] Entering Begin block."
	
				if(!$ComputerName)
				{
					Write-Verbose "[$funcName] $ComputerName is not defined, loading global value '$script:Server'."
					$ComputerName = Get-TSGlobalServerName
				}
				else
				{
					$ComputerName = Set-TSGlobalServerName -ComputerName $ComputerName
				}
	
				Write-Verbose "[$FuncName] Attempting remote connection to '$ComputerName'"
				$TSManager = New-Object Cassia.TerminalServicesManager
				$TSRemoteServer = $TSManager.GetRemoteServer($ComputerName)
				$TSRemoteServer.Open()
	
				if(!$TSRemoteServer.IsOpen)
				{
					Throw 'Connection to remote server is not open. Use Connect-TSServer to connect first.'
				}
	
				Write-Verbose "[$FuncName] Connection is open '$ComputerName'"
				Write-Verbose "[$FuncName] Updating global Server name '$ComputerName'"
				$null = Set-TSGlobalServerName -ComputerName $ComputerName
			}
			catch
			{
				Throw
			}
		}
	
	
	
		Process
		{
	
			Write-Verbose "[$funcName] Entering Process block."
	
			try
			{
	
				if($PSCmdlet.ParameterSetName -eq 'Id')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					$session = $TSRemoteServer.GetSession($Id)
				}
	
				if($PSCmdlet.ParameterSetName -eq 'InputObject')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					$session  = $InputObject
				}
	
				if($session -ne $null)
				{
					if($Force -or $PSCmdlet.ShouldProcess($TSRemoteServer.ServerName,"Logging off session id '$($session.sessionId)'"))
					{
						Write-Verbose "[$FuncName] Logging off session '$($session.SessionId)'"
						$session.Logoff($Synchronous)
					}
				}
			}
			catch
			{
				Throw
			}
		}
	
	
		end
		{
			try
			{
				Write-Verbose "[$funcName] Entering End block."
				Write-Verbose "[$funcName] Disconnecting from remote server '$($TSRemoteServer.ServerName)'"
				$TSRemoteServer.Close()
				$TSRemoteServer.Dispose()
			}
			catch
			{
				Throw
			}
		}
	}
	
	function Get-TSProcess
	{
	
		<#
		.SYNOPSIS
			Gets a list of processes running in a specific session or in all sessions.
	
		.DESCRIPTION
			Use Get-TSProcess to get a list of session processes from a local or remote computers.
	
		.PARAMETER ComputerName
		    	The name of the terminal server computer. The default is the local computer. Default value is the local computer (localhost).
	
		.PARAMETER Id
			Specifies the process Id number.
	
		.PARAMETER InputObject
			   Specifies a process object. Enter a variable that contains the object, or type a command or expression that gets the sessions.
	
		.PARAMETER Name
			   Specifies the process name. Wildcards are permitted.
	
		.PARAMETER Session
			Specifies the session Id number.
	
		.EXAMPLE
			Get-TSProcess
	
			Description
			-----------
			Gets all the sessions processes from the local computer.
	
		.EXAMPLE
			Get-TSSession -Id 0 -ComputerName comp1 | Get-TSProcess
	
			Description
			-----------
			Gets all processes connected to session id 0 from remote computer 'comp1'.
	
		.EXAMPLE
			Get-TSProcess -Name s* -ComputerName comp1
	
			Description
			-----------
			Gets all the processes with name starts with the letter 's' from remote computer 'comp1'.
	
		.OUTPUTS
			Cassia.Impl.TerminalServicesProcess
	
		.COMPONENT
			TerminalServer
	
		.NOTES
			Author: Shay Levy
			Blog  : http://blogs.microsoft.co.il/blogs/ScriptFanatic/
	
		.LINK
			http://code.msdn.microsoft.com/PSTerminalServices
	
		.LINK
			http://code.google.com/p/cassia/
	
		.LINK
			Get-TSSession
			Stop-TSProcess
		#>
	
	
		[OutputType('Cassia.Impl.TerminalServicesProcess')]
		[CmdletBinding(DefaultParameterSetName='Name')]
	
		Param(
	
			[Parameter()]
			[Alias('CN','IPAddress')]
			[System.String]$ComputerName=$script:server,
	
			[Parameter(
				Position=0,
				ValueFromPipelineByPropertyName=$true,
				ParameterSetName='Name'
			)]
			[Alias('ProcessName')]
			[System.String]$Name='*',
	
			[Parameter(
				Mandatory=$true,
				ValueFromPipeline=$true,
				ValueFromPipelineByPropertyName=$true,
				ParameterSetName='Id'
			)]
			[Alias('ProcessID')]
			[ValidateRange(0,65536)]
			[System.Int32]$Id=-1,
	
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				ValueFromPipeline=$true,
				ParameterSetName='InputObject'
			)]
			[Cassia.Impl.TerminalServicesProcess]$InputObject,
	
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				ValueFromPipeline=$true,
				ParameterSetName='Session'
			)]
			[Alias('SessionId')]
			[Cassia.Impl.TerminalServicesSession]$Session
		)
	
	
	
		begin
		{
			$FuncName = $MyInvocation.MyCommand
			Write-Verbose "[$funcName] Entering Begin block."
	
			if(!$ComputerName)
			{
				Write-Verbose "[$funcName] $ComputerName is not defined, loading global value '$script:Server'."
				$ComputerName = Get-TSGlobalServerName
			}
			else
			{
				$ComputerName = Set-TSGlobalServerName -ComputerName $ComputerName
			}
	
			Write-Verbose "[$FuncName] Attempting remote connection to '$ComputerName'"
			$TSManager = New-Object Cassia.TerminalServicesManager
			$TSRemoteServer = $TSManager.GetRemoteServer($ComputerName)
			$TSRemoteServer.Open()
	
			if(!$TSRemoteServer.IsOpen)
			{
				Throw 'Connection to remote server is not open. Use Connect-TSServer to connect first.'
			}
	
			Write-Verbose "[$FuncName] Connection is open '$ComputerName'"
			Write-Verbose "[$FuncName] Updating global Server name '$ComputerName'"
			$null = Set-TSGlobalServerName -ComputerName $ComputerName
		}
	
	
	
		Process
		{
	
			Write-Verbose "[$funcName] Entering Process block."
	
			try
			{
	
				if($PSCmdlet.ParameterSetName -eq 'Name')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					if($Name -eq '*')
					{
						$proc = $TSRemoteServer.GetProcesses()
					}
					else
					{
						$proc = $TSRemoteServer.GetProcesses() | Where-Object {$_.ProcessName -like $Name}
					}
				}
	
				if($PSCmdlet.ParameterSetName -eq 'Id')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					if($Id -lt 0)
					{
						$proc = $TSRemoteServer.GetProcesses()
					}
					else
					{
						$proc = $TSRemoteServer.GetProcess($Id)
					}
				}
	
	
				if($PSCmdlet.ParameterSetName -eq 'Session')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					if($Session)
					{
						$proc = $Session.GetProcesses()
					}
				}
	
	
				if($PSCmdlet.ParameterSetName -eq 'InputObject')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					$proc = $InputObject
				}
	
	
				if($proc)
				{
					$proc
				}
			}
			catch
			{
				Throw
			}
		}
	
	
		end
		{
			try
			{
				Write-Verbose "[$funcName] Entering End block."
				Write-Verbose "[$funcName] Disconnecting from remote server '$($TSRemoteServer.ServerName)'"
				$TSRemoteServer.Close()
				$TSRemoteServer.Dispose()
			}
			catch
			{
				Throw
			}
		}
	}
	
	function Stop-TSProcess
	{
	
		<#
		.SYNOPSIS
			Terminates the process running in a specific session or in all sessions.
	
		.DESCRIPTION
			Use Stop-TSProcess to terminate one or more processes from a local or remote computers.
	
		.PARAMETER ComputerName
		    	The name of the terminal server computer. The default is the local computer. Default value is the local computer (localhost).
	
		.PARAMETER Id
			Specifies the process Id number.
	
		.PARAMETER InputObject
			Specifies a process object. Enter a variable that contains the object, or type a command or expression that gets the sessions.
	
		.PARAMETER Name
			Specifies the process name.
	
		.PARAMETER Session
			Specifies the session Id number.
	
		.PARAMETER Force
		       Overrides any confirmations made by the command.
	
		.EXAMPLE
			 Get-TSProcess -Id 6552 | Stop-TSProcess
	
			Description
			-----------
			Gets process Id 6552 from the local computer and stop it. Confirmations needed.
	
		.EXAMPLE
			Get-TSSession -Id 3 -ComputerName comp1 | Stop-TSProcess -Force
	
			Description
			-----------
			Terminats all processes connected to session id 3 from remote computer 'comp1', suppress confirmations.
	
		.OUTPUTS
			Cassia.Impl.TerminalServicesProcess
	
		.COMPONENT
			TerminalServer
	
		.NOTES
			Author: Shay Levy
			Blog  : http://blogs.microsoft.co.il/blogs/ScriptFanatic/
	
		.LINK
			http://code.msdn.microsoft.com/PSTerminalServices
	
		.LINK
			http://code.google.com/p/cassia/
	
		.LINK
			Get-TSProcess
			Get-TSSession
		#>
	
		[CmdletBinding(SupportsShouldProcess=$true,ConfirmImpact='High',DefaultParameterSetName='Name')]
	
		Param(
			[Parameter()]
			[Alias('CN','IPAddress')]
			[System.String]$ComputerName=$script:server,
	
			[Parameter(
				Position=0,
				ValueFromPipelineByPropertyName=$true,
				ParameterSetName='Name'
			)]
			[Alias("ProcessName")]
			[System.String]$Name='*',
	
			[Parameter(
				Mandatory=$true,
				ValueFromPipeline=$true,
				ValueFromPipelineByPropertyName=$true,
				ParameterSetName='Id'
			)]
			[Alias('ProcessID')]
			[ValidateRange(0,65536)]
			[System.Int32]$Id=-1,
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				ValueFromPipeline=$true,
				ParameterSetName='InputObject'
			)]
			[Cassia.Impl.TerminalServicesProcess]$InputObject,
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				ValueFromPipeline=$true,
				ParameterSetName='Session'
			)]
			[Alias('SessionId')]
			[Cassia.Impl.TerminalServicesSession]$Session,
	
			[switch]$Force
		)
	
	
		begin
		{
			try
			{
				$FuncName = $MyInvocation.MyCommand
				Write-Verbose "[$funcName] Entering Begin block."
	
				if(!$ComputerName)
				{
					Write-Verbose "[$funcName] $ComputerName is not defined, loading global value '$script:Server'."
					$ComputerName = Get-TSGlobalServerName
				}
				else
				{
					$ComputerName = Set-TSGlobalServerName -ComputerName $ComputerName
				}
	
				Write-Verbose "[$FuncName] Attempting remote connection to '$ComputerName'"
				$TSManager = New-Object Cassia.TerminalServicesManager
				$TSRemoteServer = $TSManager.GetRemoteServer($ComputerName)
				$TSRemoteServer.Open()
	
				if(!$TSRemoteServer.IsOpen)
				{
					Throw 'Connection to remote server is not open. Use Connect-TSServer to connect first.'
				}
	
				Write-Verbose "[$FuncName] Connection is open '$ComputerName'"
				Write-Verbose "[$FuncName] Updating global Server name '$ComputerName'"
				$null = Set-TSGlobalServerName -ComputerName $ComputerName
			}
			catch
			{
				Throw
			}
		}
	
	
		Process
		{
	
			Write-Verbose "[$funcName] Entering Process block."
	
			try
			{
	
				if($PSCmdlet.ParameterSetName -eq 'Name')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					if($Name -eq '*')
					{
						$proc = $TSRemoteServer.GetProcesses()
					}
					else
					{
						$proc = $TSRemoteServer.GetProcesses() | Where-Object {$_.ProcessName -like $Name}
					}
				}
	
				if($PSCmdlet.ParameterSetName -eq 'Id')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					if($Id -lt 0)
					{
						$proc = $TSRemoteServer.GetProcesses()
					}
					else
					{
						$proc = $TSRemoteServer.GetProcess($Id)
					}
				}
	
	
				if($PSCmdlet.ParameterSetName -eq 'Session')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					if($Session)
					{
						$proc = $Session.GetProcesses()
					}
				}
	
	
				if($PSCmdlet.ParameterSetName -eq 'InputObject')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					$proc = $InputObject
				}
	
	
				if($proc)
				{
					foreach($p in $proc)
					{
						if($Force -or $PSCmdlet.ShouldProcess($TSRemoteServer.ServerName,"Stop Process '$($p.ProcessName) ($($p.ProcessID))"))
						{
							Write-Verbose "[$FuncName] Killing process '$($p.ProcessName)' ($($p.ProcessId))"
							$p.Kill()
						}
					}
				}
			}
			catch
			{
				Throw
			}
		}
	
	
		end
		{
			try
			{
				Write-Verbose "[$funcName] Entering End block."
				Write-Verbose "[$funcName] Disconnecting from remote server '$($TSRemoteServer.ServerName)'"
				$TSRemoteServer.Close()
				$TSRemoteServer.Dispose()
			}
			catch
			{
				Throw
			}
		}
	}
	
	function Send-TSMessage
	{
	
		<#
		.SYNOPSIS
			Displays a message box in the specified session Id.
	
		.DESCRIPTION
			Use Send-TSMessage display a message box in the specified session Id.
	
		.PARAMETER ComputerName
		    	The name of the terminal server computer. The default is the local computer. Default value is the local computer (localhost).
	
		.PARAMETER Text
			The text to display in the message box.
	
		.PARAMETER SessionID
			The number of the session Id.
	
		.PARAMETER Caption
			   The caption of the message box. The default caption is 'Alert'.
	
		.EXAMPLE
			$Message = "Importnat message`n, the server is going down for maintanace in 10 minutes. Please save your work and logoff."
			Get-TSSession -State Active -ComputerName comp1 | Send-TSMessage -Message $Message
	
			Description
			-----------
			Displays a message box inside all active sessions of computer name 'comp1'.
	
		.OUTPUTS
	
		.COMPONENT
			TerminalServer
	
		.NOTES
			Author: Shay Levy
			Blog  : http://blogs.microsoft.co.il/blogs/ScriptFanatic/
	
		.LINK
			http://code.msdn.microsoft.com/PSTerminalServices
	
		.LINK
			http://code.google.com/p/cassia/
	
		.LINK
			Get-TSSession
		#>
	
	
		[CmdletBinding(DefaultParameterSetName='Session')]
	
		Param(
			[Parameter()]
			[Alias('CN','IPAddress')]
			[System.String]$ComputerName=$script:server,
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				HelpMessage='The text to display in the message box.'
			)]
			[System.String]$Text,
	
			[Parameter(
				HelpMessage='The caption of the message box.'
			)]
			[ValidateNotNullOrEmpty()]
			[System.String]$Caption='Alert',
	
			[Parameter(
				Position=0,
				ValueFromPipelineByPropertyName=$true,
				ParameterSetName='Session'
			)]
			[Alias('SessionID')]
			[ValidateRange(0,65536)]
			[System.Int32]$Id=-1,
	
			[Parameter(
				Position=0,
				Mandatory=$true,
				ValueFromPipeline=$true,
				ParameterSetName='InputObject'
			)]
			[Cassia.Impl.TerminalServicesSession]$InputObject
		)
	
		begin
		{
			try
			{
				$FuncName = $MyInvocation.MyCommand
				Write-Verbose "[$funcName] Entering Begin block."
	
				if(!$ComputerName)
				{
					Write-Verbose "[$funcName] $ComputerName is not defined, loading global value '$script:Server'."
					$ComputerName = Get-TSGlobalServerName
				}
				else
				{
					$ComputerName = Set-TSGlobalServerName -ComputerName $ComputerName
				}
	
				Write-Verbose "[$FuncName] Attempting remote connection to '$ComputerName'"
				$TSManager = New-Object Cassia.TerminalServicesManager
				$TSRemoteServer = $TSManager.GetRemoteServer($ComputerName)
				$TSRemoteServer.Open()
	
				if(!$TSRemoteServer.IsOpen)
				{
					Throw 'Connection to remote server is not open. Use Connect-TSServer to connect first.'
				}
	
				Write-Verbose "[$FuncName] Connection is open '$ComputerName'"
				Write-Verbose "[$FuncName] Updating global Server name '$ComputerName'"
				$null = Set-TSGlobalServerName -ComputerName $ComputerName
			}
			catch
			{
				Throw
			}
		}
	
	
		process
		{
	
			Write-Verbose "[$funcName] Entering Process block."
	
			try
			{
	
				if($PSCmdlet.ParameterSetName -eq 'Session')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					if($Id -ge 0)
					{
						$session = $TSRemoteServer.GetSession($Id)
					}
				}
	
				if($PSCmdlet.ParameterSetName -eq 'InputObject')
				{
					Write-Verbose "[$FuncName] Binding to ParameterSetName '$($PSCmdlet.ParameterSetName)'"
					$session = $InputObject
				}
	
				if($session)
				{
					Write-Verbose "[$FuncName] Sending alert message to session id: '$($session.SessionId)' on '$ComputerName'"
					$session.MessageBox($Text,$Caption)
				}
			}
			catch
			{
				Throw
			}
		}
	
	
		end
		{
			try
			{
				Write-Verbose "[$funcName] Entering End block."
				Write-Verbose "[$funcName] Disconnecting from remote server '$($TSRemoteServer.ServerName)'"
				$TSRemoteServer.Close()
				$TSRemoteServer.Dispose()
			}
			catch
			{
				Throw
			}
		}
	}
	
	function Get-TSServers
	{
	
		<#
		.SYNOPSIS
			Enumerates all terminal servers in a given domain.
	
		.DESCRIPTION
			Enumerates all terminal servers in a given domain.
	
		.PARAMETER ComputerName
		    	The name of the terminal server computer. The default is the local computer. Default value is the local computer (localhost).
	
		.PARAMETER DomainName
			The name of the domain. The default is the caller domain name ($env:USERDOMAIN).
	
		.EXAMPLE
			Get-TSDomainServers
	
			Description
			-----------
			Get a list of all terminal servers of the caller default domain.
	
		.OUTPUTS
	
		.COMPONENT
			TerminalServer
	
		.NOTES
			Author: Shay Levy
			Blog  : http://blogs.microsoft.co.il/blogs/ScriptFanatic/
	
		.LINK
			http://code.msdn.microsoft.com/PSTerminalServices
	
		.LINK
			http://code.google.com/p/cassia/
	
		.LINK
			Get-TSSession
		#>
	
	
		[OutputType('System.Management.Automation.PSCustomObject')]
		[CmdletBinding()]
	
		Param(
			[Parameter(
				Position=0,
				ParameterSetName='Name'
			)]
			[System.String]$DomainName=$env:USERDOMAIN
		)
	
	
		try
		{
			$FuncName = $MyInvocation.MyCommand
			if(!$ComputerName)
			{
				Write-Verbose "[$funcName] ComputerName is not defined, loading global value '$script:Server'."
				$ComputerName = Get-TSGlobalServerName
			}
			else
			{
				$ComputerName = Set-TSGlobalServerName -ComputerName $ComputerName
			}
	
			Write-Verbose "[$funcName] Enumerating terminal servers for '$DomainName' domain."
			Write-Warning 'Depending on your environment the command may take a while to complete.'
			$TSManager = New-Object Cassia.TerminalServicesManager
			$TSManager.GetServers($DomainName)
		}
		catch
		{
			Throw
		}
	
	}
	
	function Get-TSCurrentSession
	{
	
		<#
		.SYNOPSIS
			Provides information about the session in which the current process is running.
	
		.DESCRIPTION
			Provides information about the session in which the current process is running.
	
		.EXAMPLE
			Get-TSCurrentSession
	
			Description
			-----------
			Displays the session in which the current process is running on the local computer.
	
		.OUTPUTS
			Cassia.Impl.TerminalServicesSession
	
		.COMPONENT
			TerminalServer
	
		.NOTES
			Author: Shay Levy
			Blog  : http://blogs.microsoft.co.il/blogs/ScriptFanatic/
	
		.LINK
			http://code.msdn.microsoft.com/PSTerminalServices
	
		.LINK
			http://code.google.com/p/cassia/
	
		.LINK
			Get-TSSession
		#>
	
	
		[OutputType('Cassia.Impl.TerminalServicesSession')]
		[CmdletBinding()]
	
		param(
			[Parameter()]
			[Alias('CN','IPAddress')]
			[System.String]$ComputerName=$script:server
		)
	
	
		try
		{
			$FuncName = $MyInvocation.MyCommand
	
			if(!$ComputerName)
			{
				Write-Verbose "[$funcName] ComputerName is not defined, loading global value '$script:Server'."
				$ComputerName = Get-TSGlobalServerName
			}
			else
			{
				$ComputerName = Set-TSGlobalServerName -ComputerName $ComputerName
			}
	
			Write-Verbose "[$funcName] Attempting remote connection to '$ComputerName'"
			$TSManager = New-Object Cassia.TerminalServicesManager
			$TSRemoteServer = $TSManager.GetRemoteServer($ComputerName)
			$TSRemoteServer.Open()
	
			if(!$TSRemoteServer.IsOpen)
			{
				Throw 'Connection to remote server is not open. Use Connect-TSServer to connect first.'
			}
	
			Write-Verbose "[$funcName] Connection is open '$ComputerName'"
			Write-Verbose "[$funcName] Updating global Server name '$ComputerName'"
			$null = Set-TSGlobalServerName -ComputerName $ComputerName
	
			Write-Verbose "[$funcName] Get CurrentSession from '$ComputerName'"
			$TSManager.CurrentSession
	
			Write-Verbose "[$funcName] Disconnecting from remote server '$($TSRemoteServer.ServerName)'"
			$TSRemoteServer.Close()
			$TSRemoteServer.Dispose()
		}
		catch
		{
			Throw
		}
	}
	
	function Set-TSGlobalServerName
	{
		[CmdletBinding()]
	
		Param(
			[Parameter(Mandatory=$true)]
			[ValidateNotNullOrEmpty()]
			[System.String]$ComputerName
		)
	
		if($ComputerName -eq "." -OR $ComputerName -eq $env:COMPUTERNAME)
		{
			$ComputerName='localhost'
		}
	
		$script:Server=$ComputerName
		$script:Server
	}
	
	function Get-TSGlobalServerName
	{
		$script:Server
	}#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
